
# python
import pathlib
# woosh
import woosh

SAMPLE_DIR = pathlib.Path(__file__).parent.absolute() / '../../' / '../../' / 'sample'
def test():
    with open(SAMPLE_DIR / 'stdlib/heapq.py', 'rb') as f:
        tokens = list(woosh.tokenize(f))
    for token, expected in zip(tokens, EXPECTED):
        assert token == expected

EXPECTED = [
woosh.Token(woosh.ENCODING, 'utf-8', 1, 0, 1, 0),
woosh.Token(woosh.STRING, '"""Heap queue algorithm (a.k.a. priority queue).\r\n\r\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\r\nall k, counting elements from 0.  For the sake of comparison,\r\nnon-existing elements are considered to be infinite.  The interesting\r\nproperty of a heap is that a[0] is always its smallest element.\r\n\r\nUsage:\r\n\r\nheap = []            # creates an empty heap\r\nheappush(heap, item) # pushes a new item on the heap\r\nitem = heappop(heap) # pops the smallest item from the heap\r\nitem = heap[0]       # smallest item on the heap without popping it\r\nheapify(x)           # transforms list into a heap, in-place, in linear time\r\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\r\n                               # new item; the heap size is unchanged\r\n\r\nOur API differs from textbook heap algorithms as follows:\r\n\r\n- We use 0-based indexing.  This makes the relationship between the\r\n  index for a node and the indexes for its children slightly less\r\n  obvious, but is more suitable since Python uses 0-based indexing.\r\n\r\n- Our heappop() method returns the smallest item, not the largest.\r\n\r\nThese two make it possible to view the heap as a regular Python list\r\nwithout surprises: heap[0] is the smallest item, and heap.sort()\r\nmaintains the heap invariant!\r\n"""', 1, 0, 29, 3),
woosh.Token(woosh.NEWLINE, '\r\n', 29, 3, 30, 0),
woosh.Token(woosh.COMMENT, "# Original code by Kevin O'Connor, augmented by Tim Peters and Raymond Hettinger", 31, 0, 31, 80),
woosh.Token(woosh.NAME, '__about__', 33, 0, 33, 9),
woosh.Token(woosh.OP, '=', 33, 10, 33, 11),
woosh.Token(woosh.STRING, '"""Heap queues\r\n\r\n[explanation by FranÃ§ois Pinard]\r\n\r\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\r\nall k, counting elements from 0.  For the sake of comparison,\r\nnon-existing elements are considered to be infinite.  The interesting\r\nproperty of a heap is that a[0] is always its smallest element.\r\n\r\nThe strange invariant above is meant to be an efficient memory\r\nrepresentation for a tournament.  The numbers below are `k\', not a[k]:\r\n\r\n                                   0\r\n\r\n                  1                                 2\r\n\r\n          3               4                5               6\r\n\r\n      7       8       9       10      11      12      13      14\r\n\r\n    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30\r\n\r\n\r\nIn the tree above, each cell `k\' is topping `2*k+1\' and `2*k+2\'.  In\r\na usual binary tournament we see in sports, each cell is the winner\r\nover the two cells it tops, and we can trace the winner down the tree\r\nto see all opponents s/he had.  However, in many computer applications\r\nof such tournaments, we do not need to trace the history of a winner.\r\nTo be more memory efficient, when a winner is promoted, we try to\r\nreplace it by something else at a lower level, and the rule becomes\r\nthat a cell and the two cells it tops contain three different items,\r\nbut the top cell "wins" over the two topped cells.\r\n\r\nIf this heap invariant is protected at all time, index 0 is clearly\r\nthe overall winner.  The simplest algorithmic way to remove it and\r\nfind the "next" winner is to move some loser (let\'s say cell 30 in the\r\ndiagram above) into the 0 position, and then percolate this new 0 down\r\nthe tree, exchanging values, until the invariant is re-established.\r\nThis is clearly logarithmic on the total number of items in the tree.\r\nBy iterating over all items, you get an O(n ln n) sort.\r\n\r\nA nice feature of this sort is that you can efficiently insert new\r\nitems while the sort is going on, provided that the inserted items are\r\nnot "better" than the last 0\'th element you extracted.  This is\r\nespecially useful in simulation contexts, where the tree holds all\r\nincoming events, and the "win" condition means the smallest scheduled\r\ntime.  When an event schedule other events for execution, they are\r\nscheduled into the future, so they can easily go into the heap.  So, a\r\nheap is a good structure for implementing schedulers (this is what I\r\nused for my MIDI sequencer :-).\r\n\r\nVarious structures for implementing schedulers have been extensively\r\nstudied, and heaps are good for this, as they are reasonably speedy,\r\nthe speed is almost constant, and the worst case is not much different\r\nthan the average case.  However, there are other representations which\r\nare more efficient overall, yet the worst cases might be terrible.\r\n\r\nHeaps are also very useful in big disk sorts.  You most probably all\r\nknow that a big sort implies producing "runs" (which are pre-sorted\r\nsequences, which size is usually related to the amount of CPU memory),\r\nfollowed by a merging passes for these runs, which merging is often\r\nvery cleverly organised[1].  It is very important that the initial\r\nsort produces the longest runs possible.  Tournaments are a good way\r\nto that.  If, using all the memory available to hold a tournament, you\r\nreplace and percolate items that happen to fit the current run, you\'ll\r\nproduce runs which are twice the size of the memory for random input,\r\nand much better for input fuzzily ordered.\r\n\r\nMoreover, if you output the 0\'th item on disk and get an input which\r\nmay not fit in the current tournament (because the value "wins" over\r\nthe last output value), it cannot fit in the heap, so the size of the\r\nheap decreases.  The freed memory could be cleverly reused immediately\r\nfor progressively building a second heap, which grows at exactly the\r\nsame rate the first heap is melting.  When the first heap completely\r\nvanishes, you switch heaps and start a new run.  Clever and quite\r\neffective!\r\n\r\nIn a word, heaps are useful memory structures to know.  I use them in\r\na few applications, and I think it is good to keep a `heap\' module\r\naround. :-)\r\n\r\n--------------------\r\n[1] The disk balancing algorithms which are current, nowadays, are\r\nmore annoying than clever, and this is a consequence of the seeking\r\ncapabilities of the disks.  On devices which cannot seek, like big\r\ntape drives, the story was quite different, and one had to be very\r\nclever to ensure (far in advance) that each tape movement will be the\r\nmost effective possible (that is, will best participate at\r\n"progressing" the merge).  Some tapes were even able to read\r\nbackwards, and this was also used to avoid the rewinding time.\r\nBelieve me, real good tape sorts were quite spectacular to watch!\r\nFrom all times, sorting has always been a Great Art! :-)\r\n"""', 33, 12, 125, 3),
woosh.Token(woosh.NEWLINE, '\r\n', 125, 3, 126, 0),
woosh.Token(woosh.NAME, '__all__', 127, 0, 127, 7),
woosh.Token(woosh.OP, '=', 127, 8, 127, 9),
woosh.Token(woosh.OP, '[', 127, 10, 127, 11),
woosh.Token(woosh.STRING, "'heappush'", 127, 11, 127, 21),
woosh.Token(woosh.OP, ',', 127, 21, 127, 22),
woosh.Token(woosh.STRING, "'heappop'", 127, 23, 127, 32),
woosh.Token(woosh.OP, ',', 127, 32, 127, 33),
woosh.Token(woosh.STRING, "'heapify'", 127, 34, 127, 43),
woosh.Token(woosh.OP, ',', 127, 43, 127, 44),
woosh.Token(woosh.STRING, "'heapreplace'", 127, 45, 127, 58),
woosh.Token(woosh.OP, ',', 127, 58, 127, 59),
woosh.Token(woosh.STRING, "'merge'", 127, 60, 127, 67),
woosh.Token(woosh.OP, ',', 127, 67, 127, 68),
woosh.Token(woosh.STRING, "'nlargest'", 128, 11, 128, 21),
woosh.Token(woosh.OP, ',', 128, 21, 128, 22),
woosh.Token(woosh.STRING, "'nsmallest'", 128, 23, 128, 34),
woosh.Token(woosh.OP, ',', 128, 34, 128, 35),
woosh.Token(woosh.STRING, "'heappushpop'", 128, 36, 128, 49),
woosh.Token(woosh.OP, ']', 128, 49, 128, 50),
woosh.Token(woosh.NEWLINE, '\r\n', 128, 50, 129, 0),
woosh.Token(woosh.NAME, 'def', 130, 0, 130, 3),
woosh.Token(woosh.NAME, 'heappush', 130, 4, 130, 12),
woosh.Token(woosh.OP, '(', 130, 12, 130, 13),
woosh.Token(woosh.NAME, 'heap', 130, 13, 130, 17),
woosh.Token(woosh.OP, ',', 130, 17, 130, 18),
woosh.Token(woosh.NAME, 'item', 130, 19, 130, 23),
woosh.Token(woosh.OP, ')', 130, 23, 130, 24),
woosh.Token(woosh.OP, ':', 130, 24, 130, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 130, 25, 131, 0),
woosh.Token(woosh.INDENT, '    ', 131, 0, 131, 4),
woosh.Token(woosh.STRING, '"""Push item onto heap, maintaining the heap invariant."""', 131, 4, 131, 62),
woosh.Token(woosh.NEWLINE, '\r\n', 131, 62, 132, 0),
woosh.Token(woosh.NAME, 'heap', 132, 4, 132, 8),
woosh.Token(woosh.OP, '.', 132, 8, 132, 9),
woosh.Token(woosh.NAME, 'append', 132, 9, 132, 15),
woosh.Token(woosh.OP, '(', 132, 15, 132, 16),
woosh.Token(woosh.NAME, 'item', 132, 16, 132, 20),
woosh.Token(woosh.OP, ')', 132, 20, 132, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 132, 21, 133, 0),
woosh.Token(woosh.NAME, '_siftdown', 133, 4, 133, 13),
woosh.Token(woosh.OP, '(', 133, 13, 133, 14),
woosh.Token(woosh.NAME, 'heap', 133, 14, 133, 18),
woosh.Token(woosh.OP, ',', 133, 18, 133, 19),
woosh.Token(woosh.NUMBER, '0', 133, 20, 133, 21),
woosh.Token(woosh.OP, ',', 133, 21, 133, 22),
woosh.Token(woosh.NAME, 'len', 133, 23, 133, 26),
woosh.Token(woosh.OP, '(', 133, 26, 133, 27),
woosh.Token(woosh.NAME, 'heap', 133, 27, 133, 31),
woosh.Token(woosh.OP, ')', 133, 31, 133, 32),
woosh.Token(woosh.OP, '-', 133, 32, 133, 33),
woosh.Token(woosh.NUMBER, '1', 133, 33, 133, 34),
woosh.Token(woosh.OP, ')', 133, 34, 133, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 133, 35, 134, 0),
woosh.Token(woosh.DEDENT, '', 135, 0, 135, 0),
woosh.Token(woosh.NAME, 'def', 135, 0, 135, 3),
woosh.Token(woosh.NAME, 'heappop', 135, 4, 135, 11),
woosh.Token(woosh.OP, '(', 135, 11, 135, 12),
woosh.Token(woosh.NAME, 'heap', 135, 12, 135, 16),
woosh.Token(woosh.OP, ')', 135, 16, 135, 17),
woosh.Token(woosh.OP, ':', 135, 17, 135, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 135, 18, 136, 0),
woosh.Token(woosh.INDENT, '    ', 136, 0, 136, 4),
woosh.Token(woosh.STRING, '"""Pop the smallest item off the heap, maintaining the heap invariant."""', 136, 4, 136, 77),
woosh.Token(woosh.NEWLINE, '\r\n', 136, 77, 137, 0),
woosh.Token(woosh.NAME, 'lastelt', 137, 4, 137, 11),
woosh.Token(woosh.OP, '=', 137, 12, 137, 13),
woosh.Token(woosh.NAME, 'heap', 137, 14, 137, 18),
woosh.Token(woosh.OP, '.', 137, 18, 137, 19),
woosh.Token(woosh.NAME, 'pop', 137, 19, 137, 22),
woosh.Token(woosh.OP, '(', 137, 22, 137, 23),
woosh.Token(woosh.OP, ')', 137, 23, 137, 24),
woosh.Token(woosh.COMMENT, '# raises appropriate IndexError if heap is empty', 137, 28, 137, 76),
woosh.Token(woosh.NEWLINE, '\r\n', 137, 76, 138, 0),
woosh.Token(woosh.NAME, 'if', 138, 4, 138, 6),
woosh.Token(woosh.NAME, 'heap', 138, 7, 138, 11),
woosh.Token(woosh.OP, ':', 138, 11, 138, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 138, 12, 139, 0),
woosh.Token(woosh.INDENT, '        ', 139, 0, 139, 8),
woosh.Token(woosh.NAME, 'returnitem', 139, 8, 139, 18),
woosh.Token(woosh.OP, '=', 139, 19, 139, 20),
woosh.Token(woosh.NAME, 'heap', 139, 21, 139, 25),
woosh.Token(woosh.OP, '[', 139, 25, 139, 26),
woosh.Token(woosh.NUMBER, '0', 139, 26, 139, 27),
woosh.Token(woosh.OP, ']', 139, 27, 139, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 139, 28, 140, 0),
woosh.Token(woosh.NAME, 'heap', 140, 8, 140, 12),
woosh.Token(woosh.OP, '[', 140, 12, 140, 13),
woosh.Token(woosh.NUMBER, '0', 140, 13, 140, 14),
woosh.Token(woosh.OP, ']', 140, 14, 140, 15),
woosh.Token(woosh.OP, '=', 140, 16, 140, 17),
woosh.Token(woosh.NAME, 'lastelt', 140, 18, 140, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 140, 25, 141, 0),
woosh.Token(woosh.NAME, '_siftup', 141, 8, 141, 15),
woosh.Token(woosh.OP, '(', 141, 15, 141, 16),
woosh.Token(woosh.NAME, 'heap', 141, 16, 141, 20),
woosh.Token(woosh.OP, ',', 141, 20, 141, 21),
woosh.Token(woosh.NUMBER, '0', 141, 22, 141, 23),
woosh.Token(woosh.OP, ')', 141, 23, 141, 24),
woosh.Token(woosh.NEWLINE, '\r\n', 141, 24, 142, 0),
woosh.Token(woosh.NAME, 'return', 142, 8, 142, 14),
woosh.Token(woosh.NAME, 'returnitem', 142, 15, 142, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 142, 25, 143, 0),
woosh.Token(woosh.DEDENT, '    ', 143, 0, 143, 4),
woosh.Token(woosh.NAME, 'return', 143, 4, 143, 10),
woosh.Token(woosh.NAME, 'lastelt', 143, 11, 143, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 143, 18, 144, 0),
woosh.Token(woosh.DEDENT, '', 145, 0, 145, 0),
woosh.Token(woosh.NAME, 'def', 145, 0, 145, 3),
woosh.Token(woosh.NAME, 'heapreplace', 145, 4, 145, 15),
woosh.Token(woosh.OP, '(', 145, 15, 145, 16),
woosh.Token(woosh.NAME, 'heap', 145, 16, 145, 20),
woosh.Token(woosh.OP, ',', 145, 20, 145, 21),
woosh.Token(woosh.NAME, 'item', 145, 22, 145, 26),
woosh.Token(woosh.OP, ')', 145, 26, 145, 27),
woosh.Token(woosh.OP, ':', 145, 27, 145, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 145, 28, 146, 0),
woosh.Token(woosh.INDENT, '    ', 146, 0, 146, 4),
woosh.Token(woosh.STRING, '"""Pop and return the current smallest value, and add the new item.\r\n\r\n    This is more efficient than heappop() followed by heappush(), and can be\r\n    more appropriate when using a fixed-size heap.  Note that the value\r\n    returned may be larger than item!  That constrains reasonable uses of\r\n    this routine unless written as part of a conditional replacement:\r\n\r\n        if item > heap[0]:\r\n            item = heapreplace(heap, item)\r\n    """', 146, 4, 155, 7),
woosh.Token(woosh.NEWLINE, '\r\n', 155, 7, 156, 0),
woosh.Token(woosh.NAME, 'returnitem', 156, 4, 156, 14),
woosh.Token(woosh.OP, '=', 156, 15, 156, 16),
woosh.Token(woosh.NAME, 'heap', 156, 17, 156, 21),
woosh.Token(woosh.OP, '[', 156, 21, 156, 22),
woosh.Token(woosh.NUMBER, '0', 156, 22, 156, 23),
woosh.Token(woosh.OP, ']', 156, 23, 156, 24),
woosh.Token(woosh.COMMENT, '# raises appropriate IndexError if heap is empty', 156, 28, 156, 76),
woosh.Token(woosh.NEWLINE, '\r\n', 156, 76, 157, 0),
woosh.Token(woosh.NAME, 'heap', 157, 4, 157, 8),
woosh.Token(woosh.OP, '[', 157, 8, 157, 9),
woosh.Token(woosh.NUMBER, '0', 157, 9, 157, 10),
woosh.Token(woosh.OP, ']', 157, 10, 157, 11),
woosh.Token(woosh.OP, '=', 157, 12, 157, 13),
woosh.Token(woosh.NAME, 'item', 157, 14, 157, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 157, 18, 158, 0),
woosh.Token(woosh.NAME, '_siftup', 158, 4, 158, 11),
woosh.Token(woosh.OP, '(', 158, 11, 158, 12),
woosh.Token(woosh.NAME, 'heap', 158, 12, 158, 16),
woosh.Token(woosh.OP, ',', 158, 16, 158, 17),
woosh.Token(woosh.NUMBER, '0', 158, 18, 158, 19),
woosh.Token(woosh.OP, ')', 158, 19, 158, 20),
woosh.Token(woosh.NEWLINE, '\r\n', 158, 20, 159, 0),
woosh.Token(woosh.NAME, 'return', 159, 4, 159, 10),
woosh.Token(woosh.NAME, 'returnitem', 159, 11, 159, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 159, 21, 160, 0),
woosh.Token(woosh.DEDENT, '', 161, 0, 161, 0),
woosh.Token(woosh.NAME, 'def', 161, 0, 161, 3),
woosh.Token(woosh.NAME, 'heappushpop', 161, 4, 161, 15),
woosh.Token(woosh.OP, '(', 161, 15, 161, 16),
woosh.Token(woosh.NAME, 'heap', 161, 16, 161, 20),
woosh.Token(woosh.OP, ',', 161, 20, 161, 21),
woosh.Token(woosh.NAME, 'item', 161, 22, 161, 26),
woosh.Token(woosh.OP, ')', 161, 26, 161, 27),
woosh.Token(woosh.OP, ':', 161, 27, 161, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 161, 28, 162, 0),
woosh.Token(woosh.INDENT, '    ', 162, 0, 162, 4),
woosh.Token(woosh.STRING, '"""Fast version of a heappush followed by a heappop."""', 162, 4, 162, 59),
woosh.Token(woosh.NEWLINE, '\r\n', 162, 59, 163, 0),
woosh.Token(woosh.NAME, 'if', 163, 4, 163, 6),
woosh.Token(woosh.NAME, 'heap', 163, 7, 163, 11),
woosh.Token(woosh.NAME, 'and', 163, 12, 163, 15),
woosh.Token(woosh.NAME, 'heap', 163, 16, 163, 20),
woosh.Token(woosh.OP, '[', 163, 20, 163, 21),
woosh.Token(woosh.NUMBER, '0', 163, 21, 163, 22),
woosh.Token(woosh.OP, ']', 163, 22, 163, 23),
woosh.Token(woosh.OP, '<', 163, 24, 163, 25),
woosh.Token(woosh.NAME, 'item', 163, 26, 163, 30),
woosh.Token(woosh.OP, ':', 163, 30, 163, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 163, 31, 164, 0),
woosh.Token(woosh.INDENT, '        ', 164, 0, 164, 8),
woosh.Token(woosh.NAME, 'item', 164, 8, 164, 12),
woosh.Token(woosh.OP, ',', 164, 12, 164, 13),
woosh.Token(woosh.NAME, 'heap', 164, 14, 164, 18),
woosh.Token(woosh.OP, '[', 164, 18, 164, 19),
woosh.Token(woosh.NUMBER, '0', 164, 19, 164, 20),
woosh.Token(woosh.OP, ']', 164, 20, 164, 21),
woosh.Token(woosh.OP, '=', 164, 22, 164, 23),
woosh.Token(woosh.NAME, 'heap', 164, 24, 164, 28),
woosh.Token(woosh.OP, '[', 164, 28, 164, 29),
woosh.Token(woosh.NUMBER, '0', 164, 29, 164, 30),
woosh.Token(woosh.OP, ']', 164, 30, 164, 31),
woosh.Token(woosh.OP, ',', 164, 31, 164, 32),
woosh.Token(woosh.NAME, 'item', 164, 33, 164, 37),
woosh.Token(woosh.NEWLINE, '\r\n', 164, 37, 165, 0),
woosh.Token(woosh.NAME, '_siftup', 165, 8, 165, 15),
woosh.Token(woosh.OP, '(', 165, 15, 165, 16),
woosh.Token(woosh.NAME, 'heap', 165, 16, 165, 20),
woosh.Token(woosh.OP, ',', 165, 20, 165, 21),
woosh.Token(woosh.NUMBER, '0', 165, 22, 165, 23),
woosh.Token(woosh.OP, ')', 165, 23, 165, 24),
woosh.Token(woosh.NEWLINE, '\r\n', 165, 24, 166, 0),
woosh.Token(woosh.DEDENT, '    ', 166, 0, 166, 4),
woosh.Token(woosh.NAME, 'return', 166, 4, 166, 10),
woosh.Token(woosh.NAME, 'item', 166, 11, 166, 15),
woosh.Token(woosh.NEWLINE, '\r\n', 166, 15, 167, 0),
woosh.Token(woosh.DEDENT, '', 168, 0, 168, 0),
woosh.Token(woosh.NAME, 'def', 168, 0, 168, 3),
woosh.Token(woosh.NAME, 'heapify', 168, 4, 168, 11),
woosh.Token(woosh.OP, '(', 168, 11, 168, 12),
woosh.Token(woosh.NAME, 'x', 168, 12, 168, 13),
woosh.Token(woosh.OP, ')', 168, 13, 168, 14),
woosh.Token(woosh.OP, ':', 168, 14, 168, 15),
woosh.Token(woosh.NEWLINE, '\r\n', 168, 15, 169, 0),
woosh.Token(woosh.INDENT, '    ', 169, 0, 169, 4),
woosh.Token(woosh.STRING, '"""Transform list into a heap, in-place, in O(len(x)) time."""', 169, 4, 169, 66),
woosh.Token(woosh.NEWLINE, '\r\n', 169, 66, 170, 0),
woosh.Token(woosh.NAME, 'n', 170, 4, 170, 5),
woosh.Token(woosh.OP, '=', 170, 6, 170, 7),
woosh.Token(woosh.NAME, 'len', 170, 8, 170, 11),
woosh.Token(woosh.OP, '(', 170, 11, 170, 12),
woosh.Token(woosh.NAME, 'x', 170, 12, 170, 13),
woosh.Token(woosh.OP, ')', 170, 13, 170, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 170, 14, 171, 0),
woosh.Token(woosh.COMMENT, "# Transform bottom-up.  The largest index there's any point to looking at", 171, 4, 171, 77),
woosh.Token(woosh.COMMENT, '# is the largest with a child index in-range, so must have 2*i + 1 < n,', 172, 4, 172, 75),
woosh.Token(woosh.COMMENT, '# or i < (n-1)/2.  If n is even = 2*j, this is (2*j-1)/2 = j-1/2 so', 173, 4, 173, 71),
woosh.Token(woosh.COMMENT, '# j-1 is the largest, which is n//2 - 1.  If n is odd = 2*j+1, this is', 174, 4, 174, 74),
woosh.Token(woosh.COMMENT, "# (2*j+1-1)/2 = j so j-1 is the largest, and that's again n//2-1.", 175, 4, 175, 69),
woosh.Token(woosh.NAME, 'for', 176, 4, 176, 7),
woosh.Token(woosh.NAME, 'i', 176, 8, 176, 9),
woosh.Token(woosh.NAME, 'in', 176, 10, 176, 12),
woosh.Token(woosh.NAME, 'reversed', 176, 13, 176, 21),
woosh.Token(woosh.OP, '(', 176, 21, 176, 22),
woosh.Token(woosh.NAME, 'range', 176, 22, 176, 27),
woosh.Token(woosh.OP, '(', 176, 27, 176, 28),
woosh.Token(woosh.NAME, 'n', 176, 28, 176, 29),
woosh.Token(woosh.OP, '//', 176, 29, 176, 31),
woosh.Token(woosh.NUMBER, '2', 176, 31, 176, 32),
woosh.Token(woosh.OP, ')', 176, 32, 176, 33),
woosh.Token(woosh.OP, ')', 176, 33, 176, 34),
woosh.Token(woosh.OP, ':', 176, 34, 176, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 176, 35, 177, 0),
woosh.Token(woosh.INDENT, '        ', 177, 0, 177, 8),
woosh.Token(woosh.NAME, '_siftup', 177, 8, 177, 15),
woosh.Token(woosh.OP, '(', 177, 15, 177, 16),
woosh.Token(woosh.NAME, 'x', 177, 16, 177, 17),
woosh.Token(woosh.OP, ',', 177, 17, 177, 18),
woosh.Token(woosh.NAME, 'i', 177, 19, 177, 20),
woosh.Token(woosh.OP, ')', 177, 20, 177, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 177, 21, 178, 0),
woosh.Token(woosh.DEDENT, '', 179, 0, 179, 0),
woosh.Token(woosh.DEDENT, '', 179, 0, 179, 0),
woosh.Token(woosh.NAME, 'def', 179, 0, 179, 3),
woosh.Token(woosh.NAME, '_heappop_max', 179, 4, 179, 16),
woosh.Token(woosh.OP, '(', 179, 16, 179, 17),
woosh.Token(woosh.NAME, 'heap', 179, 17, 179, 21),
woosh.Token(woosh.OP, ')', 179, 21, 179, 22),
woosh.Token(woosh.OP, ':', 179, 22, 179, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 179, 23, 180, 0),
woosh.Token(woosh.INDENT, '    ', 180, 0, 180, 4),
woosh.Token(woosh.STRING, '"""Maxheap version of a heappop."""', 180, 4, 180, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 180, 39, 181, 0),
woosh.Token(woosh.NAME, 'lastelt', 181, 4, 181, 11),
woosh.Token(woosh.OP, '=', 181, 12, 181, 13),
woosh.Token(woosh.NAME, 'heap', 181, 14, 181, 18),
woosh.Token(woosh.OP, '.', 181, 18, 181, 19),
woosh.Token(woosh.NAME, 'pop', 181, 19, 181, 22),
woosh.Token(woosh.OP, '(', 181, 22, 181, 23),
woosh.Token(woosh.OP, ')', 181, 23, 181, 24),
woosh.Token(woosh.COMMENT, '# raises appropriate IndexError if heap is empty', 181, 28, 181, 76),
woosh.Token(woosh.NEWLINE, '\r\n', 181, 76, 182, 0),
woosh.Token(woosh.NAME, 'if', 182, 4, 182, 6),
woosh.Token(woosh.NAME, 'heap', 182, 7, 182, 11),
woosh.Token(woosh.OP, ':', 182, 11, 182, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 182, 12, 183, 0),
woosh.Token(woosh.INDENT, '        ', 183, 0, 183, 8),
woosh.Token(woosh.NAME, 'returnitem', 183, 8, 183, 18),
woosh.Token(woosh.OP, '=', 183, 19, 183, 20),
woosh.Token(woosh.NAME, 'heap', 183, 21, 183, 25),
woosh.Token(woosh.OP, '[', 183, 25, 183, 26),
woosh.Token(woosh.NUMBER, '0', 183, 26, 183, 27),
woosh.Token(woosh.OP, ']', 183, 27, 183, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 183, 28, 184, 0),
woosh.Token(woosh.NAME, 'heap', 184, 8, 184, 12),
woosh.Token(woosh.OP, '[', 184, 12, 184, 13),
woosh.Token(woosh.NUMBER, '0', 184, 13, 184, 14),
woosh.Token(woosh.OP, ']', 184, 14, 184, 15),
woosh.Token(woosh.OP, '=', 184, 16, 184, 17),
woosh.Token(woosh.NAME, 'lastelt', 184, 18, 184, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 184, 25, 185, 0),
woosh.Token(woosh.NAME, '_siftup_max', 185, 8, 185, 19),
woosh.Token(woosh.OP, '(', 185, 19, 185, 20),
woosh.Token(woosh.NAME, 'heap', 185, 20, 185, 24),
woosh.Token(woosh.OP, ',', 185, 24, 185, 25),
woosh.Token(woosh.NUMBER, '0', 185, 26, 185, 27),
woosh.Token(woosh.OP, ')', 185, 27, 185, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 185, 28, 186, 0),
woosh.Token(woosh.NAME, 'return', 186, 8, 186, 14),
woosh.Token(woosh.NAME, 'returnitem', 186, 15, 186, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 186, 25, 187, 0),
woosh.Token(woosh.DEDENT, '    ', 187, 0, 187, 4),
woosh.Token(woosh.NAME, 'return', 187, 4, 187, 10),
woosh.Token(woosh.NAME, 'lastelt', 187, 11, 187, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 187, 18, 188, 0),
woosh.Token(woosh.DEDENT, '', 189, 0, 189, 0),
woosh.Token(woosh.NAME, 'def', 189, 0, 189, 3),
woosh.Token(woosh.NAME, '_heapreplace_max', 189, 4, 189, 20),
woosh.Token(woosh.OP, '(', 189, 20, 189, 21),
woosh.Token(woosh.NAME, 'heap', 189, 21, 189, 25),
woosh.Token(woosh.OP, ',', 189, 25, 189, 26),
woosh.Token(woosh.NAME, 'item', 189, 27, 189, 31),
woosh.Token(woosh.OP, ')', 189, 31, 189, 32),
woosh.Token(woosh.OP, ':', 189, 32, 189, 33),
woosh.Token(woosh.NEWLINE, '\r\n', 189, 33, 190, 0),
woosh.Token(woosh.INDENT, '    ', 190, 0, 190, 4),
woosh.Token(woosh.STRING, '"""Maxheap version of a heappop followed by a heappush."""', 190, 4, 190, 62),
woosh.Token(woosh.NEWLINE, '\r\n', 190, 62, 191, 0),
woosh.Token(woosh.NAME, 'returnitem', 191, 4, 191, 14),
woosh.Token(woosh.OP, '=', 191, 15, 191, 16),
woosh.Token(woosh.NAME, 'heap', 191, 17, 191, 21),
woosh.Token(woosh.OP, '[', 191, 21, 191, 22),
woosh.Token(woosh.NUMBER, '0', 191, 22, 191, 23),
woosh.Token(woosh.OP, ']', 191, 23, 191, 24),
woosh.Token(woosh.COMMENT, '# raises appropriate IndexError if heap is empty', 191, 28, 191, 76),
woosh.Token(woosh.NEWLINE, '\r\n', 191, 76, 192, 0),
woosh.Token(woosh.NAME, 'heap', 192, 4, 192, 8),
woosh.Token(woosh.OP, '[', 192, 8, 192, 9),
woosh.Token(woosh.NUMBER, '0', 192, 9, 192, 10),
woosh.Token(woosh.OP, ']', 192, 10, 192, 11),
woosh.Token(woosh.OP, '=', 192, 12, 192, 13),
woosh.Token(woosh.NAME, 'item', 192, 14, 192, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 192, 18, 193, 0),
woosh.Token(woosh.NAME, '_siftup_max', 193, 4, 193, 15),
woosh.Token(woosh.OP, '(', 193, 15, 193, 16),
woosh.Token(woosh.NAME, 'heap', 193, 16, 193, 20),
woosh.Token(woosh.OP, ',', 193, 20, 193, 21),
woosh.Token(woosh.NUMBER, '0', 193, 22, 193, 23),
woosh.Token(woosh.OP, ')', 193, 23, 193, 24),
woosh.Token(woosh.NEWLINE, '\r\n', 193, 24, 194, 0),
woosh.Token(woosh.NAME, 'return', 194, 4, 194, 10),
woosh.Token(woosh.NAME, 'returnitem', 194, 11, 194, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 194, 21, 195, 0),
woosh.Token(woosh.DEDENT, '', 196, 0, 196, 0),
woosh.Token(woosh.NAME, 'def', 196, 0, 196, 3),
woosh.Token(woosh.NAME, '_heapify_max', 196, 4, 196, 16),
woosh.Token(woosh.OP, '(', 196, 16, 196, 17),
woosh.Token(woosh.NAME, 'x', 196, 17, 196, 18),
woosh.Token(woosh.OP, ')', 196, 18, 196, 19),
woosh.Token(woosh.OP, ':', 196, 19, 196, 20),
woosh.Token(woosh.NEWLINE, '\r\n', 196, 20, 197, 0),
woosh.Token(woosh.INDENT, '    ', 197, 0, 197, 4),
woosh.Token(woosh.STRING, '"""Transform list into a maxheap, in-place, in O(len(x)) time."""', 197, 4, 197, 69),
woosh.Token(woosh.NEWLINE, '\r\n', 197, 69, 198, 0),
woosh.Token(woosh.NAME, 'n', 198, 4, 198, 5),
woosh.Token(woosh.OP, '=', 198, 6, 198, 7),
woosh.Token(woosh.NAME, 'len', 198, 8, 198, 11),
woosh.Token(woosh.OP, '(', 198, 11, 198, 12),
woosh.Token(woosh.NAME, 'x', 198, 12, 198, 13),
woosh.Token(woosh.OP, ')', 198, 13, 198, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 198, 14, 199, 0),
woosh.Token(woosh.NAME, 'for', 199, 4, 199, 7),
woosh.Token(woosh.NAME, 'i', 199, 8, 199, 9),
woosh.Token(woosh.NAME, 'in', 199, 10, 199, 12),
woosh.Token(woosh.NAME, 'reversed', 199, 13, 199, 21),
woosh.Token(woosh.OP, '(', 199, 21, 199, 22),
woosh.Token(woosh.NAME, 'range', 199, 22, 199, 27),
woosh.Token(woosh.OP, '(', 199, 27, 199, 28),
woosh.Token(woosh.NAME, 'n', 199, 28, 199, 29),
woosh.Token(woosh.OP, '//', 199, 29, 199, 31),
woosh.Token(woosh.NUMBER, '2', 199, 31, 199, 32),
woosh.Token(woosh.OP, ')', 199, 32, 199, 33),
woosh.Token(woosh.OP, ')', 199, 33, 199, 34),
woosh.Token(woosh.OP, ':', 199, 34, 199, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 199, 35, 200, 0),
woosh.Token(woosh.INDENT, '        ', 200, 0, 200, 8),
woosh.Token(woosh.NAME, '_siftup_max', 200, 8, 200, 19),
woosh.Token(woosh.OP, '(', 200, 19, 200, 20),
woosh.Token(woosh.NAME, 'x', 200, 20, 200, 21),
woosh.Token(woosh.OP, ',', 200, 21, 200, 22),
woosh.Token(woosh.NAME, 'i', 200, 23, 200, 24),
woosh.Token(woosh.OP, ')', 200, 24, 200, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 200, 25, 201, 0),
woosh.Token(woosh.COMMENT, "# 'heap' is a heap at all indices >= startpos, except possibly for pos.  pos", 202, 0, 202, 76),
woosh.Token(woosh.COMMENT, '# is the index of a leaf with a possibly out-of-order value.  Restore the', 203, 0, 203, 73),
woosh.Token(woosh.COMMENT, '# heap invariant.', 204, 0, 204, 17),
woosh.Token(woosh.DEDENT, '', 205, 0, 205, 0),
woosh.Token(woosh.DEDENT, '', 205, 0, 205, 0),
woosh.Token(woosh.NAME, 'def', 205, 0, 205, 3),
woosh.Token(woosh.NAME, '_siftdown', 205, 4, 205, 13),
woosh.Token(woosh.OP, '(', 205, 13, 205, 14),
woosh.Token(woosh.NAME, 'heap', 205, 14, 205, 18),
woosh.Token(woosh.OP, ',', 205, 18, 205, 19),
woosh.Token(woosh.NAME, 'startpos', 205, 20, 205, 28),
woosh.Token(woosh.OP, ',', 205, 28, 205, 29),
woosh.Token(woosh.NAME, 'pos', 205, 30, 205, 33),
woosh.Token(woosh.OP, ')', 205, 33, 205, 34),
woosh.Token(woosh.OP, ':', 205, 34, 205, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 205, 35, 206, 0),
woosh.Token(woosh.INDENT, '    ', 206, 0, 206, 4),
woosh.Token(woosh.NAME, 'newitem', 206, 4, 206, 11),
woosh.Token(woosh.OP, '=', 206, 12, 206, 13),
woosh.Token(woosh.NAME, 'heap', 206, 14, 206, 18),
woosh.Token(woosh.OP, '[', 206, 18, 206, 19),
woosh.Token(woosh.NAME, 'pos', 206, 19, 206, 22),
woosh.Token(woosh.OP, ']', 206, 22, 206, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 206, 23, 207, 0),
woosh.Token(woosh.COMMENT, '# Follow the path to the root, moving parents down until finding a place', 207, 4, 207, 76),
woosh.Token(woosh.COMMENT, '# newitem fits.', 208, 4, 208, 19),
woosh.Token(woosh.NAME, 'while', 209, 4, 209, 9),
woosh.Token(woosh.NAME, 'pos', 209, 10, 209, 13),
woosh.Token(woosh.OP, '>', 209, 14, 209, 15),
woosh.Token(woosh.NAME, 'startpos', 209, 16, 209, 24),
woosh.Token(woosh.OP, ':', 209, 24, 209, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 209, 25, 210, 0),
woosh.Token(woosh.INDENT, '        ', 210, 0, 210, 8),
woosh.Token(woosh.NAME, 'parentpos', 210, 8, 210, 17),
woosh.Token(woosh.OP, '=', 210, 18, 210, 19),
woosh.Token(woosh.OP, '(', 210, 20, 210, 21),
woosh.Token(woosh.NAME, 'pos', 210, 21, 210, 24),
woosh.Token(woosh.OP, '-', 210, 25, 210, 26),
woosh.Token(woosh.NUMBER, '1', 210, 27, 210, 28),
woosh.Token(woosh.OP, ')', 210, 28, 210, 29),
woosh.Token(woosh.OP, '>>', 210, 30, 210, 32),
woosh.Token(woosh.NUMBER, '1', 210, 33, 210, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 210, 34, 211, 0),
woosh.Token(woosh.NAME, 'parent', 211, 8, 211, 14),
woosh.Token(woosh.OP, '=', 211, 15, 211, 16),
woosh.Token(woosh.NAME, 'heap', 211, 17, 211, 21),
woosh.Token(woosh.OP, '[', 211, 21, 211, 22),
woosh.Token(woosh.NAME, 'parentpos', 211, 22, 211, 31),
woosh.Token(woosh.OP, ']', 211, 31, 211, 32),
woosh.Token(woosh.NEWLINE, '\r\n', 211, 32, 212, 0),
woosh.Token(woosh.NAME, 'if', 212, 8, 212, 10),
woosh.Token(woosh.NAME, 'newitem', 212, 11, 212, 18),
woosh.Token(woosh.OP, '<', 212, 19, 212, 20),
woosh.Token(woosh.NAME, 'parent', 212, 21, 212, 27),
woosh.Token(woosh.OP, ':', 212, 27, 212, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 212, 28, 213, 0),
woosh.Token(woosh.INDENT, '            ', 213, 0, 213, 12),
woosh.Token(woosh.NAME, 'heap', 213, 12, 213, 16),
woosh.Token(woosh.OP, '[', 213, 16, 213, 17),
woosh.Token(woosh.NAME, 'pos', 213, 17, 213, 20),
woosh.Token(woosh.OP, ']', 213, 20, 213, 21),
woosh.Token(woosh.OP, '=', 213, 22, 213, 23),
woosh.Token(woosh.NAME, 'parent', 213, 24, 213, 30),
woosh.Token(woosh.NEWLINE, '\r\n', 213, 30, 214, 0),
woosh.Token(woosh.NAME, 'pos', 214, 12, 214, 15),
woosh.Token(woosh.OP, '=', 214, 16, 214, 17),
woosh.Token(woosh.NAME, 'parentpos', 214, 18, 214, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 214, 27, 215, 0),
woosh.Token(woosh.NAME, 'continue', 215, 12, 215, 20),
woosh.Token(woosh.NEWLINE, '\r\n', 215, 20, 216, 0),
woosh.Token(woosh.DEDENT, '        ', 216, 0, 216, 8),
woosh.Token(woosh.NAME, 'break', 216, 8, 216, 13),
woosh.Token(woosh.NEWLINE, '\r\n', 216, 13, 217, 0),
woosh.Token(woosh.DEDENT, '    ', 217, 0, 217, 4),
woosh.Token(woosh.NAME, 'heap', 217, 4, 217, 8),
woosh.Token(woosh.OP, '[', 217, 8, 217, 9),
woosh.Token(woosh.NAME, 'pos', 217, 9, 217, 12),
woosh.Token(woosh.OP, ']', 217, 12, 217, 13),
woosh.Token(woosh.OP, '=', 217, 14, 217, 15),
woosh.Token(woosh.NAME, 'newitem', 217, 16, 217, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 217, 23, 218, 0),
woosh.Token(woosh.COMMENT, '# The child indices of heap index pos are already heaps, and we want to make', 219, 0, 219, 76),
woosh.Token(woosh.COMMENT, '# a heap at index pos too.  We do this by bubbling the smaller child of', 220, 0, 220, 71),
woosh.Token(woosh.COMMENT, "# pos up (and so on with that child's children, etc) until hitting a leaf,", 221, 0, 221, 74),
woosh.Token(woosh.COMMENT, '# then using _siftdown to move the oddball originally at index pos into place.', 222, 0, 222, 78),
woosh.Token(woosh.COMMENT, '#', 223, 0, 223, 1),
woosh.Token(woosh.COMMENT, '# We *could* break out of the loop as soon as we find a pos where newitem <=', 224, 0, 224, 76),
woosh.Token(woosh.COMMENT, "# both its children, but turns out that's not a good idea, and despite that", 225, 0, 225, 75),
woosh.Token(woosh.COMMENT, '# many books write the algorithm that way.  During a heap pop, the last array', 226, 0, 226, 77),
woosh.Token(woosh.COMMENT, '# element is sifted in, and that tends to be large, so that comparing it', 227, 0, 227, 72),
woosh.Token(woosh.COMMENT, "# against values starting from the root usually doesn't pay (= usually doesn't", 228, 0, 228, 78),
woosh.Token(woosh.COMMENT, '# get us out of the loop early).  See Knuth, Volume 3, where this is', 229, 0, 229, 68),
woosh.Token(woosh.COMMENT, '# explained and quantified in an exercise.', 230, 0, 230, 42),
woosh.Token(woosh.COMMENT, '#', 231, 0, 231, 1),
woosh.Token(woosh.COMMENT, '# Cutting the # of comparisons is important, since these routines have no', 232, 0, 232, 73),
woosh.Token(woosh.COMMENT, '# way to extract "the priority" from an array element, so that intelligence', 233, 0, 233, 75),
woosh.Token(woosh.COMMENT, '# is likely to be hiding in custom comparison methods, or in array elements', 234, 0, 234, 75),
woosh.Token(woosh.COMMENT, '# storing (priority, record) tuples.  Comparisons are thus potentially', 235, 0, 235, 70),
woosh.Token(woosh.COMMENT, '# expensive.', 236, 0, 236, 12),
woosh.Token(woosh.COMMENT, '#', 237, 0, 237, 1),
woosh.Token(woosh.COMMENT, '# On random arrays of length 1000, making this change cut the number of', 238, 0, 238, 71),
woosh.Token(woosh.COMMENT, '# comparisons made by heapify() a little, and those made by exhaustive', 239, 0, 239, 70),
woosh.Token(woosh.COMMENT, '# heappop() a lot, in accord with theory.  Here are typical results from 3', 240, 0, 240, 74),
woosh.Token(woosh.COMMENT, '# runs (3 just to demonstrate how small the variance is):', 241, 0, 241, 57),
woosh.Token(woosh.COMMENT, '#', 242, 0, 242, 1),
woosh.Token(woosh.COMMENT, '# Compares needed by heapify     Compares needed by 1000 heappops', 243, 0, 243, 65),
woosh.Token(woosh.COMMENT, '# --------------------------     --------------------------------', 244, 0, 244, 65),
woosh.Token(woosh.COMMENT, '# 1837 cut to 1663               14996 cut to 8680', 245, 0, 245, 50),
woosh.Token(woosh.COMMENT, '# 1855 cut to 1659               14966 cut to 8678', 246, 0, 246, 50),
woosh.Token(woosh.COMMENT, '# 1847 cut to 1660               15024 cut to 8703', 247, 0, 247, 50),
woosh.Token(woosh.COMMENT, '#', 248, 0, 248, 1),
woosh.Token(woosh.COMMENT, '# Building the heap by using heappush() 1000 times instead required', 249, 0, 249, 67),
woosh.Token(woosh.COMMENT, '# 2198, 2148, and 2219 compares:  heapify() is more efficient, when', 250, 0, 250, 67),
woosh.Token(woosh.COMMENT, '# you can use it.', 251, 0, 251, 17),
woosh.Token(woosh.COMMENT, '#', 252, 0, 252, 1),
woosh.Token(woosh.COMMENT, '# The total compares needed by list.sort() on the same lists were 8627,', 253, 0, 253, 71),
woosh.Token(woosh.COMMENT, '# 8627, and 8632 (this should be compared to the sum of heapify() and', 254, 0, 254, 69),
woosh.Token(woosh.COMMENT, '# heappop() compares):  list.sort() is (unsurprisingly!) more efficient', 255, 0, 255, 71),
woosh.Token(woosh.COMMENT, '# for sorting.', 256, 0, 256, 14),
woosh.Token(woosh.DEDENT, '', 258, 0, 258, 0),
woosh.Token(woosh.NAME, 'def', 258, 0, 258, 3),
woosh.Token(woosh.NAME, '_siftup', 258, 4, 258, 11),
woosh.Token(woosh.OP, '(', 258, 11, 258, 12),
woosh.Token(woosh.NAME, 'heap', 258, 12, 258, 16),
woosh.Token(woosh.OP, ',', 258, 16, 258, 17),
woosh.Token(woosh.NAME, 'pos', 258, 18, 258, 21),
woosh.Token(woosh.OP, ')', 258, 21, 258, 22),
woosh.Token(woosh.OP, ':', 258, 22, 258, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 258, 23, 259, 0),
woosh.Token(woosh.INDENT, '    ', 259, 0, 259, 4),
woosh.Token(woosh.NAME, 'endpos', 259, 4, 259, 10),
woosh.Token(woosh.OP, '=', 259, 11, 259, 12),
woosh.Token(woosh.NAME, 'len', 259, 13, 259, 16),
woosh.Token(woosh.OP, '(', 259, 16, 259, 17),
woosh.Token(woosh.NAME, 'heap', 259, 17, 259, 21),
woosh.Token(woosh.OP, ')', 259, 21, 259, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 259, 22, 260, 0),
woosh.Token(woosh.NAME, 'startpos', 260, 4, 260, 12),
woosh.Token(woosh.OP, '=', 260, 13, 260, 14),
woosh.Token(woosh.NAME, 'pos', 260, 15, 260, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 260, 18, 261, 0),
woosh.Token(woosh.NAME, 'newitem', 261, 4, 261, 11),
woosh.Token(woosh.OP, '=', 261, 12, 261, 13),
woosh.Token(woosh.NAME, 'heap', 261, 14, 261, 18),
woosh.Token(woosh.OP, '[', 261, 18, 261, 19),
woosh.Token(woosh.NAME, 'pos', 261, 19, 261, 22),
woosh.Token(woosh.OP, ']', 261, 22, 261, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 261, 23, 262, 0),
woosh.Token(woosh.COMMENT, '# Bubble up the smaller child until hitting a leaf.', 262, 4, 262, 55),
woosh.Token(woosh.NAME, 'childpos', 263, 4, 263, 12),
woosh.Token(woosh.OP, '=', 263, 13, 263, 14),
woosh.Token(woosh.NUMBER, '2', 263, 15, 263, 16),
woosh.Token(woosh.OP, '*', 263, 16, 263, 17),
woosh.Token(woosh.NAME, 'pos', 263, 17, 263, 20),
woosh.Token(woosh.OP, '+', 263, 21, 263, 22),
woosh.Token(woosh.NUMBER, '1', 263, 23, 263, 24),
woosh.Token(woosh.COMMENT, '# leftmost child position', 263, 28, 263, 53),
woosh.Token(woosh.NEWLINE, '\r\n', 263, 53, 264, 0),
woosh.Token(woosh.NAME, 'while', 264, 4, 264, 9),
woosh.Token(woosh.NAME, 'childpos', 264, 10, 264, 18),
woosh.Token(woosh.OP, '<', 264, 19, 264, 20),
woosh.Token(woosh.NAME, 'endpos', 264, 21, 264, 27),
woosh.Token(woosh.OP, ':', 264, 27, 264, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 264, 28, 265, 0),
woosh.Token(woosh.COMMENT, '# Set childpos to index of smaller child.', 265, 8, 265, 49),
woosh.Token(woosh.INDENT, '        ', 266, 0, 266, 8),
woosh.Token(woosh.NAME, 'rightpos', 266, 8, 266, 16),
woosh.Token(woosh.OP, '=', 266, 17, 266, 18),
woosh.Token(woosh.NAME, 'childpos', 266, 19, 266, 27),
woosh.Token(woosh.OP, '+', 266, 28, 266, 29),
woosh.Token(woosh.NUMBER, '1', 266, 30, 266, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 266, 31, 267, 0),
woosh.Token(woosh.NAME, 'if', 267, 8, 267, 10),
woosh.Token(woosh.NAME, 'rightpos', 267, 11, 267, 19),
woosh.Token(woosh.OP, '<', 267, 20, 267, 21),
woosh.Token(woosh.NAME, 'endpos', 267, 22, 267, 28),
woosh.Token(woosh.NAME, 'and', 267, 29, 267, 32),
woosh.Token(woosh.NAME, 'not', 267, 33, 267, 36),
woosh.Token(woosh.NAME, 'heap', 267, 37, 267, 41),
woosh.Token(woosh.OP, '[', 267, 41, 267, 42),
woosh.Token(woosh.NAME, 'childpos', 267, 42, 267, 50),
woosh.Token(woosh.OP, ']', 267, 50, 267, 51),
woosh.Token(woosh.OP, '<', 267, 52, 267, 53),
woosh.Token(woosh.NAME, 'heap', 267, 54, 267, 58),
woosh.Token(woosh.OP, '[', 267, 58, 267, 59),
woosh.Token(woosh.NAME, 'rightpos', 267, 59, 267, 67),
woosh.Token(woosh.OP, ']', 267, 67, 267, 68),
woosh.Token(woosh.OP, ':', 267, 68, 267, 69),
woosh.Token(woosh.NEWLINE, '\r\n', 267, 69, 268, 0),
woosh.Token(woosh.INDENT, '            ', 268, 0, 268, 12),
woosh.Token(woosh.NAME, 'childpos', 268, 12, 268, 20),
woosh.Token(woosh.OP, '=', 268, 21, 268, 22),
woosh.Token(woosh.NAME, 'rightpos', 268, 23, 268, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 268, 31, 269, 0),
woosh.Token(woosh.COMMENT, '# Move the smaller child up.', 269, 8, 269, 36),
woosh.Token(woosh.DEDENT, '        ', 270, 0, 270, 8),
woosh.Token(woosh.NAME, 'heap', 270, 8, 270, 12),
woosh.Token(woosh.OP, '[', 270, 12, 270, 13),
woosh.Token(woosh.NAME, 'pos', 270, 13, 270, 16),
woosh.Token(woosh.OP, ']', 270, 16, 270, 17),
woosh.Token(woosh.OP, '=', 270, 18, 270, 19),
woosh.Token(woosh.NAME, 'heap', 270, 20, 270, 24),
woosh.Token(woosh.OP, '[', 270, 24, 270, 25),
woosh.Token(woosh.NAME, 'childpos', 270, 25, 270, 33),
woosh.Token(woosh.OP, ']', 270, 33, 270, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 270, 34, 271, 0),
woosh.Token(woosh.NAME, 'pos', 271, 8, 271, 11),
woosh.Token(woosh.OP, '=', 271, 12, 271, 13),
woosh.Token(woosh.NAME, 'childpos', 271, 14, 271, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 271, 22, 272, 0),
woosh.Token(woosh.NAME, 'childpos', 272, 8, 272, 16),
woosh.Token(woosh.OP, '=', 272, 17, 272, 18),
woosh.Token(woosh.NUMBER, '2', 272, 19, 272, 20),
woosh.Token(woosh.OP, '*', 272, 20, 272, 21),
woosh.Token(woosh.NAME, 'pos', 272, 21, 272, 24),
woosh.Token(woosh.OP, '+', 272, 25, 272, 26),
woosh.Token(woosh.NUMBER, '1', 272, 27, 272, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 272, 28, 273, 0),
woosh.Token(woosh.COMMENT, '# The leaf at pos is empty now.  Put newitem there, and bubble it up', 273, 4, 273, 72),
woosh.Token(woosh.COMMENT, '# to its final resting place (by sifting its parents down).', 274, 4, 274, 63),
woosh.Token(woosh.DEDENT, '    ', 275, 0, 275, 4),
woosh.Token(woosh.NAME, 'heap', 275, 4, 275, 8),
woosh.Token(woosh.OP, '[', 275, 8, 275, 9),
woosh.Token(woosh.NAME, 'pos', 275, 9, 275, 12),
woosh.Token(woosh.OP, ']', 275, 12, 275, 13),
woosh.Token(woosh.OP, '=', 275, 14, 275, 15),
woosh.Token(woosh.NAME, 'newitem', 275, 16, 275, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 275, 23, 276, 0),
woosh.Token(woosh.NAME, '_siftdown', 276, 4, 276, 13),
woosh.Token(woosh.OP, '(', 276, 13, 276, 14),
woosh.Token(woosh.NAME, 'heap', 276, 14, 276, 18),
woosh.Token(woosh.OP, ',', 276, 18, 276, 19),
woosh.Token(woosh.NAME, 'startpos', 276, 20, 276, 28),
woosh.Token(woosh.OP, ',', 276, 28, 276, 29),
woosh.Token(woosh.NAME, 'pos', 276, 30, 276, 33),
woosh.Token(woosh.OP, ')', 276, 33, 276, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 276, 34, 277, 0),
woosh.Token(woosh.DEDENT, '', 278, 0, 278, 0),
woosh.Token(woosh.NAME, 'def', 278, 0, 278, 3),
woosh.Token(woosh.NAME, '_siftdown_max', 278, 4, 278, 17),
woosh.Token(woosh.OP, '(', 278, 17, 278, 18),
woosh.Token(woosh.NAME, 'heap', 278, 18, 278, 22),
woosh.Token(woosh.OP, ',', 278, 22, 278, 23),
woosh.Token(woosh.NAME, 'startpos', 278, 24, 278, 32),
woosh.Token(woosh.OP, ',', 278, 32, 278, 33),
woosh.Token(woosh.NAME, 'pos', 278, 34, 278, 37),
woosh.Token(woosh.OP, ')', 278, 37, 278, 38),
woosh.Token(woosh.OP, ':', 278, 38, 278, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 278, 39, 279, 0),
woosh.Token(woosh.INDENT, '    ', 279, 0, 279, 4),
woosh.Token(woosh.STRING, "'Maxheap variant of _siftdown'", 279, 4, 279, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 279, 34, 280, 0),
woosh.Token(woosh.NAME, 'newitem', 280, 4, 280, 11),
woosh.Token(woosh.OP, '=', 280, 12, 280, 13),
woosh.Token(woosh.NAME, 'heap', 280, 14, 280, 18),
woosh.Token(woosh.OP, '[', 280, 18, 280, 19),
woosh.Token(woosh.NAME, 'pos', 280, 19, 280, 22),
woosh.Token(woosh.OP, ']', 280, 22, 280, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 280, 23, 281, 0),
woosh.Token(woosh.COMMENT, '# Follow the path to the root, moving parents down until finding a place', 281, 4, 281, 76),
woosh.Token(woosh.COMMENT, '# newitem fits.', 282, 4, 282, 19),
woosh.Token(woosh.NAME, 'while', 283, 4, 283, 9),
woosh.Token(woosh.NAME, 'pos', 283, 10, 283, 13),
woosh.Token(woosh.OP, '>', 283, 14, 283, 15),
woosh.Token(woosh.NAME, 'startpos', 283, 16, 283, 24),
woosh.Token(woosh.OP, ':', 283, 24, 283, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 283, 25, 284, 0),
woosh.Token(woosh.INDENT, '        ', 284, 0, 284, 8),
woosh.Token(woosh.NAME, 'parentpos', 284, 8, 284, 17),
woosh.Token(woosh.OP, '=', 284, 18, 284, 19),
woosh.Token(woosh.OP, '(', 284, 20, 284, 21),
woosh.Token(woosh.NAME, 'pos', 284, 21, 284, 24),
woosh.Token(woosh.OP, '-', 284, 25, 284, 26),
woosh.Token(woosh.NUMBER, '1', 284, 27, 284, 28),
woosh.Token(woosh.OP, ')', 284, 28, 284, 29),
woosh.Token(woosh.OP, '>>', 284, 30, 284, 32),
woosh.Token(woosh.NUMBER, '1', 284, 33, 284, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 284, 34, 285, 0),
woosh.Token(woosh.NAME, 'parent', 285, 8, 285, 14),
woosh.Token(woosh.OP, '=', 285, 15, 285, 16),
woosh.Token(woosh.NAME, 'heap', 285, 17, 285, 21),
woosh.Token(woosh.OP, '[', 285, 21, 285, 22),
woosh.Token(woosh.NAME, 'parentpos', 285, 22, 285, 31),
woosh.Token(woosh.OP, ']', 285, 31, 285, 32),
woosh.Token(woosh.NEWLINE, '\r\n', 285, 32, 286, 0),
woosh.Token(woosh.NAME, 'if', 286, 8, 286, 10),
woosh.Token(woosh.NAME, 'parent', 286, 11, 286, 17),
woosh.Token(woosh.OP, '<', 286, 18, 286, 19),
woosh.Token(woosh.NAME, 'newitem', 286, 20, 286, 27),
woosh.Token(woosh.OP, ':', 286, 27, 286, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 286, 28, 287, 0),
woosh.Token(woosh.INDENT, '            ', 287, 0, 287, 12),
woosh.Token(woosh.NAME, 'heap', 287, 12, 287, 16),
woosh.Token(woosh.OP, '[', 287, 16, 287, 17),
woosh.Token(woosh.NAME, 'pos', 287, 17, 287, 20),
woosh.Token(woosh.OP, ']', 287, 20, 287, 21),
woosh.Token(woosh.OP, '=', 287, 22, 287, 23),
woosh.Token(woosh.NAME, 'parent', 287, 24, 287, 30),
woosh.Token(woosh.NEWLINE, '\r\n', 287, 30, 288, 0),
woosh.Token(woosh.NAME, 'pos', 288, 12, 288, 15),
woosh.Token(woosh.OP, '=', 288, 16, 288, 17),
woosh.Token(woosh.NAME, 'parentpos', 288, 18, 288, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 288, 27, 289, 0),
woosh.Token(woosh.NAME, 'continue', 289, 12, 289, 20),
woosh.Token(woosh.NEWLINE, '\r\n', 289, 20, 290, 0),
woosh.Token(woosh.DEDENT, '        ', 290, 0, 290, 8),
woosh.Token(woosh.NAME, 'break', 290, 8, 290, 13),
woosh.Token(woosh.NEWLINE, '\r\n', 290, 13, 291, 0),
woosh.Token(woosh.DEDENT, '    ', 291, 0, 291, 4),
woosh.Token(woosh.NAME, 'heap', 291, 4, 291, 8),
woosh.Token(woosh.OP, '[', 291, 8, 291, 9),
woosh.Token(woosh.NAME, 'pos', 291, 9, 291, 12),
woosh.Token(woosh.OP, ']', 291, 12, 291, 13),
woosh.Token(woosh.OP, '=', 291, 14, 291, 15),
woosh.Token(woosh.NAME, 'newitem', 291, 16, 291, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 291, 23, 292, 0),
woosh.Token(woosh.DEDENT, '', 293, 0, 293, 0),
woosh.Token(woosh.NAME, 'def', 293, 0, 293, 3),
woosh.Token(woosh.NAME, '_siftup_max', 293, 4, 293, 15),
woosh.Token(woosh.OP, '(', 293, 15, 293, 16),
woosh.Token(woosh.NAME, 'heap', 293, 16, 293, 20),
woosh.Token(woosh.OP, ',', 293, 20, 293, 21),
woosh.Token(woosh.NAME, 'pos', 293, 22, 293, 25),
woosh.Token(woosh.OP, ')', 293, 25, 293, 26),
woosh.Token(woosh.OP, ':', 293, 26, 293, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 293, 27, 294, 0),
woosh.Token(woosh.INDENT, '    ', 294, 0, 294, 4),
woosh.Token(woosh.STRING, "'Maxheap variant of _siftup'", 294, 4, 294, 32),
woosh.Token(woosh.NEWLINE, '\r\n', 294, 32, 295, 0),
woosh.Token(woosh.NAME, 'endpos', 295, 4, 295, 10),
woosh.Token(woosh.OP, '=', 295, 11, 295, 12),
woosh.Token(woosh.NAME, 'len', 295, 13, 295, 16),
woosh.Token(woosh.OP, '(', 295, 16, 295, 17),
woosh.Token(woosh.NAME, 'heap', 295, 17, 295, 21),
woosh.Token(woosh.OP, ')', 295, 21, 295, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 295, 22, 296, 0),
woosh.Token(woosh.NAME, 'startpos', 296, 4, 296, 12),
woosh.Token(woosh.OP, '=', 296, 13, 296, 14),
woosh.Token(woosh.NAME, 'pos', 296, 15, 296, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 296, 18, 297, 0),
woosh.Token(woosh.NAME, 'newitem', 297, 4, 297, 11),
woosh.Token(woosh.OP, '=', 297, 12, 297, 13),
woosh.Token(woosh.NAME, 'heap', 297, 14, 297, 18),
woosh.Token(woosh.OP, '[', 297, 18, 297, 19),
woosh.Token(woosh.NAME, 'pos', 297, 19, 297, 22),
woosh.Token(woosh.OP, ']', 297, 22, 297, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 297, 23, 298, 0),
woosh.Token(woosh.COMMENT, '# Bubble up the larger child until hitting a leaf.', 298, 4, 298, 54),
woosh.Token(woosh.NAME, 'childpos', 299, 4, 299, 12),
woosh.Token(woosh.OP, '=', 299, 13, 299, 14),
woosh.Token(woosh.NUMBER, '2', 299, 15, 299, 16),
woosh.Token(woosh.OP, '*', 299, 16, 299, 17),
woosh.Token(woosh.NAME, 'pos', 299, 17, 299, 20),
woosh.Token(woosh.OP, '+', 299, 21, 299, 22),
woosh.Token(woosh.NUMBER, '1', 299, 23, 299, 24),
woosh.Token(woosh.COMMENT, '# leftmost child position', 299, 28, 299, 53),
woosh.Token(woosh.NEWLINE, '\r\n', 299, 53, 300, 0),
woosh.Token(woosh.NAME, 'while', 300, 4, 300, 9),
woosh.Token(woosh.NAME, 'childpos', 300, 10, 300, 18),
woosh.Token(woosh.OP, '<', 300, 19, 300, 20),
woosh.Token(woosh.NAME, 'endpos', 300, 21, 300, 27),
woosh.Token(woosh.OP, ':', 300, 27, 300, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 300, 28, 301, 0),
woosh.Token(woosh.COMMENT, '# Set childpos to index of larger child.', 301, 8, 301, 48),
woosh.Token(woosh.INDENT, '        ', 302, 0, 302, 8),
woosh.Token(woosh.NAME, 'rightpos', 302, 8, 302, 16),
woosh.Token(woosh.OP, '=', 302, 17, 302, 18),
woosh.Token(woosh.NAME, 'childpos', 302, 19, 302, 27),
woosh.Token(woosh.OP, '+', 302, 28, 302, 29),
woosh.Token(woosh.NUMBER, '1', 302, 30, 302, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 302, 31, 303, 0),
woosh.Token(woosh.NAME, 'if', 303, 8, 303, 10),
woosh.Token(woosh.NAME, 'rightpos', 303, 11, 303, 19),
woosh.Token(woosh.OP, '<', 303, 20, 303, 21),
woosh.Token(woosh.NAME, 'endpos', 303, 22, 303, 28),
woosh.Token(woosh.NAME, 'and', 303, 29, 303, 32),
woosh.Token(woosh.NAME, 'not', 303, 33, 303, 36),
woosh.Token(woosh.NAME, 'heap', 303, 37, 303, 41),
woosh.Token(woosh.OP, '[', 303, 41, 303, 42),
woosh.Token(woosh.NAME, 'rightpos', 303, 42, 303, 50),
woosh.Token(woosh.OP, ']', 303, 50, 303, 51),
woosh.Token(woosh.OP, '<', 303, 52, 303, 53),
woosh.Token(woosh.NAME, 'heap', 303, 54, 303, 58),
woosh.Token(woosh.OP, '[', 303, 58, 303, 59),
woosh.Token(woosh.NAME, 'childpos', 303, 59, 303, 67),
woosh.Token(woosh.OP, ']', 303, 67, 303, 68),
woosh.Token(woosh.OP, ':', 303, 68, 303, 69),
woosh.Token(woosh.NEWLINE, '\r\n', 303, 69, 304, 0),
woosh.Token(woosh.INDENT, '            ', 304, 0, 304, 12),
woosh.Token(woosh.NAME, 'childpos', 304, 12, 304, 20),
woosh.Token(woosh.OP, '=', 304, 21, 304, 22),
woosh.Token(woosh.NAME, 'rightpos', 304, 23, 304, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 304, 31, 305, 0),
woosh.Token(woosh.COMMENT, '# Move the larger child up.', 305, 8, 305, 35),
woosh.Token(woosh.DEDENT, '        ', 306, 0, 306, 8),
woosh.Token(woosh.NAME, 'heap', 306, 8, 306, 12),
woosh.Token(woosh.OP, '[', 306, 12, 306, 13),
woosh.Token(woosh.NAME, 'pos', 306, 13, 306, 16),
woosh.Token(woosh.OP, ']', 306, 16, 306, 17),
woosh.Token(woosh.OP, '=', 306, 18, 306, 19),
woosh.Token(woosh.NAME, 'heap', 306, 20, 306, 24),
woosh.Token(woosh.OP, '[', 306, 24, 306, 25),
woosh.Token(woosh.NAME, 'childpos', 306, 25, 306, 33),
woosh.Token(woosh.OP, ']', 306, 33, 306, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 306, 34, 307, 0),
woosh.Token(woosh.NAME, 'pos', 307, 8, 307, 11),
woosh.Token(woosh.OP, '=', 307, 12, 307, 13),
woosh.Token(woosh.NAME, 'childpos', 307, 14, 307, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 307, 22, 308, 0),
woosh.Token(woosh.NAME, 'childpos', 308, 8, 308, 16),
woosh.Token(woosh.OP, '=', 308, 17, 308, 18),
woosh.Token(woosh.NUMBER, '2', 308, 19, 308, 20),
woosh.Token(woosh.OP, '*', 308, 20, 308, 21),
woosh.Token(woosh.NAME, 'pos', 308, 21, 308, 24),
woosh.Token(woosh.OP, '+', 308, 25, 308, 26),
woosh.Token(woosh.NUMBER, '1', 308, 27, 308, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 308, 28, 309, 0),
woosh.Token(woosh.COMMENT, '# The leaf at pos is empty now.  Put newitem there, and bubble it up', 309, 4, 309, 72),
woosh.Token(woosh.COMMENT, '# to its final resting place (by sifting its parents down).', 310, 4, 310, 63),
woosh.Token(woosh.DEDENT, '    ', 311, 0, 311, 4),
woosh.Token(woosh.NAME, 'heap', 311, 4, 311, 8),
woosh.Token(woosh.OP, '[', 311, 8, 311, 9),
woosh.Token(woosh.NAME, 'pos', 311, 9, 311, 12),
woosh.Token(woosh.OP, ']', 311, 12, 311, 13),
woosh.Token(woosh.OP, '=', 311, 14, 311, 15),
woosh.Token(woosh.NAME, 'newitem', 311, 16, 311, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 311, 23, 312, 0),
woosh.Token(woosh.NAME, '_siftdown_max', 312, 4, 312, 17),
woosh.Token(woosh.OP, '(', 312, 17, 312, 18),
woosh.Token(woosh.NAME, 'heap', 312, 18, 312, 22),
woosh.Token(woosh.OP, ',', 312, 22, 312, 23),
woosh.Token(woosh.NAME, 'startpos', 312, 24, 312, 32),
woosh.Token(woosh.OP, ',', 312, 32, 312, 33),
woosh.Token(woosh.NAME, 'pos', 312, 34, 312, 37),
woosh.Token(woosh.OP, ')', 312, 37, 312, 38),
woosh.Token(woosh.NEWLINE, '\r\n', 312, 38, 313, 0),
woosh.Token(woosh.DEDENT, '', 314, 0, 314, 0),
woosh.Token(woosh.NAME, 'def', 314, 0, 314, 3),
woosh.Token(woosh.NAME, 'merge', 314, 4, 314, 9),
woosh.Token(woosh.OP, '(', 314, 9, 314, 10),
woosh.Token(woosh.OP, '*', 314, 10, 314, 11),
woosh.Token(woosh.NAME, 'iterables', 314, 11, 314, 20),
woosh.Token(woosh.OP, ',', 314, 20, 314, 21),
woosh.Token(woosh.NAME, 'key', 314, 22, 314, 25),
woosh.Token(woosh.OP, '=', 314, 25, 314, 26),
woosh.Token(woosh.NAME, 'None', 314, 26, 314, 30),
woosh.Token(woosh.OP, ',', 314, 30, 314, 31),
woosh.Token(woosh.NAME, 'reverse', 314, 32, 314, 39),
woosh.Token(woosh.OP, '=', 314, 39, 314, 40),
woosh.Token(woosh.NAME, 'False', 314, 40, 314, 45),
woosh.Token(woosh.OP, ')', 314, 45, 314, 46),
woosh.Token(woosh.OP, ':', 314, 46, 314, 47),
woosh.Token(woosh.NEWLINE, '\r\n', 314, 47, 315, 0),
woosh.Token(woosh.INDENT, '    ', 315, 0, 315, 4),
woosh.Token(woosh.STRING, "'''Merge multiple sorted inputs into a single sorted output.\r\n\r\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\r\n    does not pull the data into memory all at once, and assumes that each of\r\n    the input streams is already sorted (smallest to largest).\r\n\r\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\r\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\r\n\r\n    If *key* is not None, applies a key function to each element to determine\r\n    its sort order.\r\n\r\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))\r\n    ['dog', 'cat', 'fish', 'horse', 'kangaroo']\r\n\r\n    '''", 315, 4, 330, 7),
woosh.Token(woosh.NEWLINE, '\r\n', 330, 7, 331, 0),
woosh.Token(woosh.NAME, 'h', 332, 4, 332, 5),
woosh.Token(woosh.OP, '=', 332, 6, 332, 7),
woosh.Token(woosh.OP, '[', 332, 8, 332, 9),
woosh.Token(woosh.OP, ']', 332, 9, 332, 10),
woosh.Token(woosh.NEWLINE, '\r\n', 332, 10, 333, 0),
woosh.Token(woosh.NAME, 'h_append', 333, 4, 333, 12),
woosh.Token(woosh.OP, '=', 333, 13, 333, 14),
woosh.Token(woosh.NAME, 'h', 333, 15, 333, 16),
woosh.Token(woosh.OP, '.', 333, 16, 333, 17),
woosh.Token(woosh.NAME, 'append', 333, 17, 333, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 333, 23, 334, 0),
woosh.Token(woosh.NAME, 'if', 335, 4, 335, 6),
woosh.Token(woosh.NAME, 'reverse', 335, 7, 335, 14),
woosh.Token(woosh.OP, ':', 335, 14, 335, 15),
woosh.Token(woosh.NEWLINE, '\r\n', 335, 15, 336, 0),
woosh.Token(woosh.INDENT, '        ', 336, 0, 336, 8),
woosh.Token(woosh.NAME, '_heapify', 336, 8, 336, 16),
woosh.Token(woosh.OP, '=', 336, 17, 336, 18),
woosh.Token(woosh.NAME, '_heapify_max', 336, 19, 336, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 336, 31, 337, 0),
woosh.Token(woosh.NAME, '_heappop', 337, 8, 337, 16),
woosh.Token(woosh.OP, '=', 337, 17, 337, 18),
woosh.Token(woosh.NAME, '_heappop_max', 337, 19, 337, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 337, 31, 338, 0),
woosh.Token(woosh.NAME, '_heapreplace', 338, 8, 338, 20),
woosh.Token(woosh.OP, '=', 338, 21, 338, 22),
woosh.Token(woosh.NAME, '_heapreplace_max', 338, 23, 338, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 338, 39, 339, 0),
woosh.Token(woosh.NAME, 'direction', 339, 8, 339, 17),
woosh.Token(woosh.OP, '=', 339, 18, 339, 19),
woosh.Token(woosh.OP, '-', 339, 20, 339, 21),
woosh.Token(woosh.NUMBER, '1', 339, 21, 339, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 339, 22, 340, 0),
woosh.Token(woosh.DEDENT, '    ', 340, 0, 340, 4),
woosh.Token(woosh.NAME, 'else', 340, 4, 340, 8),
woosh.Token(woosh.OP, ':', 340, 8, 340, 9),
woosh.Token(woosh.NEWLINE, '\r\n', 340, 9, 341, 0),
woosh.Token(woosh.INDENT, '        ', 341, 0, 341, 8),
woosh.Token(woosh.NAME, '_heapify', 341, 8, 341, 16),
woosh.Token(woosh.OP, '=', 341, 17, 341, 18),
woosh.Token(woosh.NAME, 'heapify', 341, 19, 341, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 341, 26, 342, 0),
woosh.Token(woosh.NAME, '_heappop', 342, 8, 342, 16),
woosh.Token(woosh.OP, '=', 342, 17, 342, 18),
woosh.Token(woosh.NAME, 'heappop', 342, 19, 342, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 342, 26, 343, 0),
woosh.Token(woosh.NAME, '_heapreplace', 343, 8, 343, 20),
woosh.Token(woosh.OP, '=', 343, 21, 343, 22),
woosh.Token(woosh.NAME, 'heapreplace', 343, 23, 343, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 343, 34, 344, 0),
woosh.Token(woosh.NAME, 'direction', 344, 8, 344, 17),
woosh.Token(woosh.OP, '=', 344, 18, 344, 19),
woosh.Token(woosh.NUMBER, '1', 344, 20, 344, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 344, 21, 345, 0),
woosh.Token(woosh.DEDENT, '    ', 346, 0, 346, 4),
woosh.Token(woosh.NAME, 'if', 346, 4, 346, 6),
woosh.Token(woosh.NAME, 'key', 346, 7, 346, 10),
woosh.Token(woosh.NAME, 'is', 346, 11, 346, 13),
woosh.Token(woosh.NAME, 'None', 346, 14, 346, 18),
woosh.Token(woosh.OP, ':', 346, 18, 346, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 346, 19, 347, 0),
woosh.Token(woosh.INDENT, '        ', 347, 0, 347, 8),
woosh.Token(woosh.NAME, 'for', 347, 8, 347, 11),
woosh.Token(woosh.NAME, 'order', 347, 12, 347, 17),
woosh.Token(woosh.OP, ',', 347, 17, 347, 18),
woosh.Token(woosh.NAME, 'it', 347, 19, 347, 21),
woosh.Token(woosh.NAME, 'in', 347, 22, 347, 24),
woosh.Token(woosh.NAME, 'enumerate', 347, 25, 347, 34),
woosh.Token(woosh.OP, '(', 347, 34, 347, 35),
woosh.Token(woosh.NAME, 'map', 347, 35, 347, 38),
woosh.Token(woosh.OP, '(', 347, 38, 347, 39),
woosh.Token(woosh.NAME, 'iter', 347, 39, 347, 43),
woosh.Token(woosh.OP, ',', 347, 43, 347, 44),
woosh.Token(woosh.NAME, 'iterables', 347, 45, 347, 54),
woosh.Token(woosh.OP, ')', 347, 54, 347, 55),
woosh.Token(woosh.OP, ')', 347, 55, 347, 56),
woosh.Token(woosh.OP, ':', 347, 56, 347, 57),
woosh.Token(woosh.NEWLINE, '\r\n', 347, 57, 348, 0),
woosh.Token(woosh.INDENT, '            ', 348, 0, 348, 12),
woosh.Token(woosh.NAME, 'try', 348, 12, 348, 15),
woosh.Token(woosh.OP, ':', 348, 15, 348, 16),
woosh.Token(woosh.NEWLINE, '\r\n', 348, 16, 349, 0),
woosh.Token(woosh.INDENT, '                ', 349, 0, 349, 16),
woosh.Token(woosh.NAME, 'next', 349, 16, 349, 20),
woosh.Token(woosh.OP, '=', 349, 21, 349, 22),
woosh.Token(woosh.NAME, 'it', 349, 23, 349, 25),
woosh.Token(woosh.OP, '.', 349, 25, 349, 26),
woosh.Token(woosh.NAME, '__next__', 349, 26, 349, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 349, 34, 350, 0),
woosh.Token(woosh.NAME, 'h_append', 350, 16, 350, 24),
woosh.Token(woosh.OP, '(', 350, 24, 350, 25),
woosh.Token(woosh.OP, '[', 350, 25, 350, 26),
woosh.Token(woosh.NAME, 'next', 350, 26, 350, 30),
woosh.Token(woosh.OP, '(', 350, 30, 350, 31),
woosh.Token(woosh.OP, ')', 350, 31, 350, 32),
woosh.Token(woosh.OP, ',', 350, 32, 350, 33),
woosh.Token(woosh.NAME, 'order', 350, 34, 350, 39),
woosh.Token(woosh.OP, '*', 350, 40, 350, 41),
woosh.Token(woosh.NAME, 'direction', 350, 42, 350, 51),
woosh.Token(woosh.OP, ',', 350, 51, 350, 52),
woosh.Token(woosh.NAME, 'next', 350, 53, 350, 57),
woosh.Token(woosh.OP, ']', 350, 57, 350, 58),
woosh.Token(woosh.OP, ')', 350, 58, 350, 59),
woosh.Token(woosh.NEWLINE, '\r\n', 350, 59, 351, 0),
woosh.Token(woosh.DEDENT, '            ', 351, 0, 351, 12),
woosh.Token(woosh.NAME, 'except', 351, 12, 351, 18),
woosh.Token(woosh.NAME, 'StopIteration', 351, 19, 351, 32),
woosh.Token(woosh.OP, ':', 351, 32, 351, 33),
woosh.Token(woosh.NEWLINE, '\r\n', 351, 33, 352, 0),
woosh.Token(woosh.INDENT, '                ', 352, 0, 352, 16),
woosh.Token(woosh.NAME, 'pass', 352, 16, 352, 20),
woosh.Token(woosh.NEWLINE, '\r\n', 352, 20, 353, 0),
woosh.Token(woosh.DEDENT, '        ', 353, 0, 353, 8),
woosh.Token(woosh.DEDENT, '', 353, 8, 353, 8),
woosh.Token(woosh.NAME, '_heapify', 353, 8, 353, 16),
woosh.Token(woosh.OP, '(', 353, 16, 353, 17),
woosh.Token(woosh.NAME, 'h', 353, 17, 353, 18),
woosh.Token(woosh.OP, ')', 353, 18, 353, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 353, 19, 354, 0),
woosh.Token(woosh.NAME, 'while', 354, 8, 354, 13),
woosh.Token(woosh.NAME, 'len', 354, 14, 354, 17),
woosh.Token(woosh.OP, '(', 354, 17, 354, 18),
woosh.Token(woosh.NAME, 'h', 354, 18, 354, 19),
woosh.Token(woosh.OP, ')', 354, 19, 354, 20),
woosh.Token(woosh.OP, '>', 354, 21, 354, 22),
woosh.Token(woosh.NUMBER, '1', 354, 23, 354, 24),
woosh.Token(woosh.OP, ':', 354, 24, 354, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 354, 25, 355, 0),
woosh.Token(woosh.INDENT, '            ', 355, 0, 355, 12),
woosh.Token(woosh.NAME, 'try', 355, 12, 355, 15),
woosh.Token(woosh.OP, ':', 355, 15, 355, 16),
woosh.Token(woosh.NEWLINE, '\r\n', 355, 16, 356, 0),
woosh.Token(woosh.INDENT, '                ', 356, 0, 356, 16),
woosh.Token(woosh.NAME, 'while', 356, 16, 356, 21),
woosh.Token(woosh.NAME, 'True', 356, 22, 356, 26),
woosh.Token(woosh.OP, ':', 356, 26, 356, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 356, 27, 357, 0),
woosh.Token(woosh.INDENT, '                    ', 357, 0, 357, 20),
woosh.Token(woosh.NAME, 'value', 357, 20, 357, 25),
woosh.Token(woosh.OP, ',', 357, 25, 357, 26),
woosh.Token(woosh.NAME, 'order', 357, 27, 357, 32),
woosh.Token(woosh.OP, ',', 357, 32, 357, 33),
woosh.Token(woosh.NAME, 'next', 357, 34, 357, 38),
woosh.Token(woosh.OP, '=', 357, 39, 357, 40),
woosh.Token(woosh.NAME, 's', 357, 41, 357, 42),
woosh.Token(woosh.OP, '=', 357, 43, 357, 44),
woosh.Token(woosh.NAME, 'h', 357, 45, 357, 46),
woosh.Token(woosh.OP, '[', 357, 46, 357, 47),
woosh.Token(woosh.NUMBER, '0', 357, 47, 357, 48),
woosh.Token(woosh.OP, ']', 357, 48, 357, 49),
woosh.Token(woosh.NEWLINE, '\r\n', 357, 49, 358, 0),
woosh.Token(woosh.NAME, 'yield', 358, 20, 358, 25),
woosh.Token(woosh.NAME, 'value', 358, 26, 358, 31),
woosh.Token(woosh.NEWLINE, '\r\n', 358, 31, 359, 0),
woosh.Token(woosh.NAME, 's', 359, 20, 359, 21),
woosh.Token(woosh.OP, '[', 359, 21, 359, 22),
woosh.Token(woosh.NUMBER, '0', 359, 22, 359, 23),
woosh.Token(woosh.OP, ']', 359, 23, 359, 24),
woosh.Token(woosh.OP, '=', 359, 25, 359, 26),
woosh.Token(woosh.NAME, 'next', 359, 27, 359, 31),
woosh.Token(woosh.OP, '(', 359, 31, 359, 32),
woosh.Token(woosh.OP, ')', 359, 32, 359, 33),
woosh.Token(woosh.COMMENT, '# raises StopIteration when exhausted', 359, 44, 359, 81),
woosh.Token(woosh.NEWLINE, '\r\n', 359, 81, 360, 0),
woosh.Token(woosh.NAME, '_heapreplace', 360, 20, 360, 32),
woosh.Token(woosh.OP, '(', 360, 32, 360, 33),
woosh.Token(woosh.NAME, 'h', 360, 33, 360, 34),
woosh.Token(woosh.OP, ',', 360, 34, 360, 35),
woosh.Token(woosh.NAME, 's', 360, 36, 360, 37),
woosh.Token(woosh.OP, ')', 360, 37, 360, 38),
woosh.Token(woosh.COMMENT, '# restore heap condition', 360, 44, 360, 68),
woosh.Token(woosh.NEWLINE, '\r\n', 360, 68, 361, 0),
woosh.Token(woosh.DEDENT, '            ', 361, 0, 361, 12),
woosh.Token(woosh.DEDENT, '', 361, 12, 361, 12),
woosh.Token(woosh.NAME, 'except', 361, 12, 361, 18),
woosh.Token(woosh.NAME, 'StopIteration', 361, 19, 361, 32),
woosh.Token(woosh.OP, ':', 361, 32, 361, 33),
woosh.Token(woosh.NEWLINE, '\r\n', 361, 33, 362, 0),
woosh.Token(woosh.INDENT, '                ', 362, 0, 362, 16),
woosh.Token(woosh.NAME, '_heappop', 362, 16, 362, 24),
woosh.Token(woosh.OP, '(', 362, 24, 362, 25),
woosh.Token(woosh.NAME, 'h', 362, 25, 362, 26),
woosh.Token(woosh.OP, ')', 362, 26, 362, 27),
woosh.Token(woosh.COMMENT, '# remove empty iterator', 362, 44, 362, 67),
woosh.Token(woosh.NEWLINE, '\r\n', 362, 67, 363, 0),
woosh.Token(woosh.DEDENT, '        ', 363, 0, 363, 8),
woosh.Token(woosh.DEDENT, '', 363, 8, 363, 8),
woosh.Token(woosh.NAME, 'if', 363, 8, 363, 10),
woosh.Token(woosh.NAME, 'h', 363, 11, 363, 12),
woosh.Token(woosh.OP, ':', 363, 12, 363, 13),
woosh.Token(woosh.NEWLINE, '\r\n', 363, 13, 364, 0),
woosh.Token(woosh.COMMENT, '# fast case when only a single iterator remains', 364, 12, 364, 59),
woosh.Token(woosh.INDENT, '            ', 365, 0, 365, 12),
woosh.Token(woosh.NAME, 'value', 365, 12, 365, 17),
woosh.Token(woosh.OP, ',', 365, 17, 365, 18),
woosh.Token(woosh.NAME, 'order', 365, 19, 365, 24),
woosh.Token(woosh.OP, ',', 365, 24, 365, 25),
woosh.Token(woosh.NAME, 'next', 365, 26, 365, 30),
woosh.Token(woosh.OP, '=', 365, 31, 365, 32),
woosh.Token(woosh.NAME, 'h', 365, 33, 365, 34),
woosh.Token(woosh.OP, '[', 365, 34, 365, 35),
woosh.Token(woosh.NUMBER, '0', 365, 35, 365, 36),
woosh.Token(woosh.OP, ']', 365, 36, 365, 37),
woosh.Token(woosh.NEWLINE, '\r\n', 365, 37, 366, 0),
woosh.Token(woosh.NAME, 'yield', 366, 12, 366, 17),
woosh.Token(woosh.NAME, 'value', 366, 18, 366, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 366, 23, 367, 0),
woosh.Token(woosh.NAME, 'yield', 367, 12, 367, 17),
woosh.Token(woosh.NAME, 'from', 367, 18, 367, 22),
woosh.Token(woosh.NAME, 'next', 367, 23, 367, 27),
woosh.Token(woosh.OP, '.', 367, 27, 367, 28),
woosh.Token(woosh.NAME, '__self__', 367, 28, 367, 36),
woosh.Token(woosh.NEWLINE, '\r\n', 367, 36, 368, 0),
woosh.Token(woosh.DEDENT, '        ', 368, 0, 368, 8),
woosh.Token(woosh.NAME, 'return', 368, 8, 368, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 368, 14, 369, 0),
woosh.Token(woosh.DEDENT, '    ', 370, 0, 370, 4),
woosh.Token(woosh.NAME, 'for', 370, 4, 370, 7),
woosh.Token(woosh.NAME, 'order', 370, 8, 370, 13),
woosh.Token(woosh.OP, ',', 370, 13, 370, 14),
woosh.Token(woosh.NAME, 'it', 370, 15, 370, 17),
woosh.Token(woosh.NAME, 'in', 370, 18, 370, 20),
woosh.Token(woosh.NAME, 'enumerate', 370, 21, 370, 30),
woosh.Token(woosh.OP, '(', 370, 30, 370, 31),
woosh.Token(woosh.NAME, 'map', 370, 31, 370, 34),
woosh.Token(woosh.OP, '(', 370, 34, 370, 35),
woosh.Token(woosh.NAME, 'iter', 370, 35, 370, 39),
woosh.Token(woosh.OP, ',', 370, 39, 370, 40),
woosh.Token(woosh.NAME, 'iterables', 370, 41, 370, 50),
woosh.Token(woosh.OP, ')', 370, 50, 370, 51),
woosh.Token(woosh.OP, ')', 370, 51, 370, 52),
woosh.Token(woosh.OP, ':', 370, 52, 370, 53),
woosh.Token(woosh.NEWLINE, '\r\n', 370, 53, 371, 0),
woosh.Token(woosh.INDENT, '        ', 371, 0, 371, 8),
woosh.Token(woosh.NAME, 'try', 371, 8, 371, 11),
woosh.Token(woosh.OP, ':', 371, 11, 371, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 371, 12, 372, 0),
woosh.Token(woosh.INDENT, '            ', 372, 0, 372, 12),
woosh.Token(woosh.NAME, 'next', 372, 12, 372, 16),
woosh.Token(woosh.OP, '=', 372, 17, 372, 18),
woosh.Token(woosh.NAME, 'it', 372, 19, 372, 21),
woosh.Token(woosh.OP, '.', 372, 21, 372, 22),
woosh.Token(woosh.NAME, '__next__', 372, 22, 372, 30),
woosh.Token(woosh.NEWLINE, '\r\n', 372, 30, 373, 0),
woosh.Token(woosh.NAME, 'value', 373, 12, 373, 17),
woosh.Token(woosh.OP, '=', 373, 18, 373, 19),
woosh.Token(woosh.NAME, 'next', 373, 20, 373, 24),
woosh.Token(woosh.OP, '(', 373, 24, 373, 25),
woosh.Token(woosh.OP, ')', 373, 25, 373, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 373, 26, 374, 0),
woosh.Token(woosh.NAME, 'h_append', 374, 12, 374, 20),
woosh.Token(woosh.OP, '(', 374, 20, 374, 21),
woosh.Token(woosh.OP, '[', 374, 21, 374, 22),
woosh.Token(woosh.NAME, 'key', 374, 22, 374, 25),
woosh.Token(woosh.OP, '(', 374, 25, 374, 26),
woosh.Token(woosh.NAME, 'value', 374, 26, 374, 31),
woosh.Token(woosh.OP, ')', 374, 31, 374, 32),
woosh.Token(woosh.OP, ',', 374, 32, 374, 33),
woosh.Token(woosh.NAME, 'order', 374, 34, 374, 39),
woosh.Token(woosh.OP, '*', 374, 40, 374, 41),
woosh.Token(woosh.NAME, 'direction', 374, 42, 374, 51),
woosh.Token(woosh.OP, ',', 374, 51, 374, 52),
woosh.Token(woosh.NAME, 'value', 374, 53, 374, 58),
woosh.Token(woosh.OP, ',', 374, 58, 374, 59),
woosh.Token(woosh.NAME, 'next', 374, 60, 374, 64),
woosh.Token(woosh.OP, ']', 374, 64, 374, 65),
woosh.Token(woosh.OP, ')', 374, 65, 374, 66),
woosh.Token(woosh.NEWLINE, '\r\n', 374, 66, 375, 0),
woosh.Token(woosh.DEDENT, '        ', 375, 0, 375, 8),
woosh.Token(woosh.NAME, 'except', 375, 8, 375, 14),
woosh.Token(woosh.NAME, 'StopIteration', 375, 15, 375, 28),
woosh.Token(woosh.OP, ':', 375, 28, 375, 29),
woosh.Token(woosh.NEWLINE, '\r\n', 375, 29, 376, 0),
woosh.Token(woosh.INDENT, '            ', 376, 0, 376, 12),
woosh.Token(woosh.NAME, 'pass', 376, 12, 376, 16),
woosh.Token(woosh.NEWLINE, '\r\n', 376, 16, 377, 0),
woosh.Token(woosh.DEDENT, '    ', 377, 0, 377, 4),
woosh.Token(woosh.DEDENT, '', 377, 4, 377, 4),
woosh.Token(woosh.NAME, '_heapify', 377, 4, 377, 12),
woosh.Token(woosh.OP, '(', 377, 12, 377, 13),
woosh.Token(woosh.NAME, 'h', 377, 13, 377, 14),
woosh.Token(woosh.OP, ')', 377, 14, 377, 15),
woosh.Token(woosh.NEWLINE, '\r\n', 377, 15, 378, 0),
woosh.Token(woosh.NAME, 'while', 378, 4, 378, 9),
woosh.Token(woosh.NAME, 'len', 378, 10, 378, 13),
woosh.Token(woosh.OP, '(', 378, 13, 378, 14),
woosh.Token(woosh.NAME, 'h', 378, 14, 378, 15),
woosh.Token(woosh.OP, ')', 378, 15, 378, 16),
woosh.Token(woosh.OP, '>', 378, 17, 378, 18),
woosh.Token(woosh.NUMBER, '1', 378, 19, 378, 20),
woosh.Token(woosh.OP, ':', 378, 20, 378, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 378, 21, 379, 0),
woosh.Token(woosh.INDENT, '        ', 379, 0, 379, 8),
woosh.Token(woosh.NAME, 'try', 379, 8, 379, 11),
woosh.Token(woosh.OP, ':', 379, 11, 379, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 379, 12, 380, 0),
woosh.Token(woosh.INDENT, '            ', 380, 0, 380, 12),
woosh.Token(woosh.NAME, 'while', 380, 12, 380, 17),
woosh.Token(woosh.NAME, 'True', 380, 18, 380, 22),
woosh.Token(woosh.OP, ':', 380, 22, 380, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 380, 23, 381, 0),
woosh.Token(woosh.INDENT, '                ', 381, 0, 381, 16),
woosh.Token(woosh.NAME, 'key_value', 381, 16, 381, 25),
woosh.Token(woosh.OP, ',', 381, 25, 381, 26),
woosh.Token(woosh.NAME, 'order', 381, 27, 381, 32),
woosh.Token(woosh.OP, ',', 381, 32, 381, 33),
woosh.Token(woosh.NAME, 'value', 381, 34, 381, 39),
woosh.Token(woosh.OP, ',', 381, 39, 381, 40),
woosh.Token(woosh.NAME, 'next', 381, 41, 381, 45),
woosh.Token(woosh.OP, '=', 381, 46, 381, 47),
woosh.Token(woosh.NAME, 's', 381, 48, 381, 49),
woosh.Token(woosh.OP, '=', 381, 50, 381, 51),
woosh.Token(woosh.NAME, 'h', 381, 52, 381, 53),
woosh.Token(woosh.OP, '[', 381, 53, 381, 54),
woosh.Token(woosh.NUMBER, '0', 381, 54, 381, 55),
woosh.Token(woosh.OP, ']', 381, 55, 381, 56),
woosh.Token(woosh.NEWLINE, '\r\n', 381, 56, 382, 0),
woosh.Token(woosh.NAME, 'yield', 382, 16, 382, 21),
woosh.Token(woosh.NAME, 'value', 382, 22, 382, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 382, 27, 383, 0),
woosh.Token(woosh.NAME, 'value', 383, 16, 383, 21),
woosh.Token(woosh.OP, '=', 383, 22, 383, 23),
woosh.Token(woosh.NAME, 'next', 383, 24, 383, 28),
woosh.Token(woosh.OP, '(', 383, 28, 383, 29),
woosh.Token(woosh.OP, ')', 383, 29, 383, 30),
woosh.Token(woosh.NEWLINE, '\r\n', 383, 30, 384, 0),
woosh.Token(woosh.NAME, 's', 384, 16, 384, 17),
woosh.Token(woosh.OP, '[', 384, 17, 384, 18),
woosh.Token(woosh.NUMBER, '0', 384, 18, 384, 19),
woosh.Token(woosh.OP, ']', 384, 19, 384, 20),
woosh.Token(woosh.OP, '=', 384, 21, 384, 22),
woosh.Token(woosh.NAME, 'key', 384, 23, 384, 26),
woosh.Token(woosh.OP, '(', 384, 26, 384, 27),
woosh.Token(woosh.NAME, 'value', 384, 27, 384, 32),
woosh.Token(woosh.OP, ')', 384, 32, 384, 33),
woosh.Token(woosh.NEWLINE, '\r\n', 384, 33, 385, 0),
woosh.Token(woosh.NAME, 's', 385, 16, 385, 17),
woosh.Token(woosh.OP, '[', 385, 17, 385, 18),
woosh.Token(woosh.NUMBER, '2', 385, 18, 385, 19),
woosh.Token(woosh.OP, ']', 385, 19, 385, 20),
woosh.Token(woosh.OP, '=', 385, 21, 385, 22),
woosh.Token(woosh.NAME, 'value', 385, 23, 385, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 385, 28, 386, 0),
woosh.Token(woosh.NAME, '_heapreplace', 386, 16, 386, 28),
woosh.Token(woosh.OP, '(', 386, 28, 386, 29),
woosh.Token(woosh.NAME, 'h', 386, 29, 386, 30),
woosh.Token(woosh.OP, ',', 386, 30, 386, 31),
woosh.Token(woosh.NAME, 's', 386, 32, 386, 33),
woosh.Token(woosh.OP, ')', 386, 33, 386, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 386, 34, 387, 0),
woosh.Token(woosh.DEDENT, '        ', 387, 0, 387, 8),
woosh.Token(woosh.DEDENT, '', 387, 8, 387, 8),
woosh.Token(woosh.NAME, 'except', 387, 8, 387, 14),
woosh.Token(woosh.NAME, 'StopIteration', 387, 15, 387, 28),
woosh.Token(woosh.OP, ':', 387, 28, 387, 29),
woosh.Token(woosh.NEWLINE, '\r\n', 387, 29, 388, 0),
woosh.Token(woosh.INDENT, '            ', 388, 0, 388, 12),
woosh.Token(woosh.NAME, '_heappop', 388, 12, 388, 20),
woosh.Token(woosh.OP, '(', 388, 20, 388, 21),
woosh.Token(woosh.NAME, 'h', 388, 21, 388, 22),
woosh.Token(woosh.OP, ')', 388, 22, 388, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 388, 23, 389, 0),
woosh.Token(woosh.DEDENT, '    ', 389, 0, 389, 4),
woosh.Token(woosh.DEDENT, '', 389, 4, 389, 4),
woosh.Token(woosh.NAME, 'if', 389, 4, 389, 6),
woosh.Token(woosh.NAME, 'h', 389, 7, 389, 8),
woosh.Token(woosh.OP, ':', 389, 8, 389, 9),
woosh.Token(woosh.NEWLINE, '\r\n', 389, 9, 390, 0),
woosh.Token(woosh.INDENT, '        ', 390, 0, 390, 8),
woosh.Token(woosh.NAME, 'key_value', 390, 8, 390, 17),
woosh.Token(woosh.OP, ',', 390, 17, 390, 18),
woosh.Token(woosh.NAME, 'order', 390, 19, 390, 24),
woosh.Token(woosh.OP, ',', 390, 24, 390, 25),
woosh.Token(woosh.NAME, 'value', 390, 26, 390, 31),
woosh.Token(woosh.OP, ',', 390, 31, 390, 32),
woosh.Token(woosh.NAME, 'next', 390, 33, 390, 37),
woosh.Token(woosh.OP, '=', 390, 38, 390, 39),
woosh.Token(woosh.NAME, 'h', 390, 40, 390, 41),
woosh.Token(woosh.OP, '[', 390, 41, 390, 42),
woosh.Token(woosh.NUMBER, '0', 390, 42, 390, 43),
woosh.Token(woosh.OP, ']', 390, 43, 390, 44),
woosh.Token(woosh.NEWLINE, '\r\n', 390, 44, 391, 0),
woosh.Token(woosh.NAME, 'yield', 391, 8, 391, 13),
woosh.Token(woosh.NAME, 'value', 391, 14, 391, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 391, 19, 392, 0),
woosh.Token(woosh.NAME, 'yield', 392, 8, 392, 13),
woosh.Token(woosh.NAME, 'from', 392, 14, 392, 18),
woosh.Token(woosh.NAME, 'next', 392, 19, 392, 23),
woosh.Token(woosh.OP, '.', 392, 23, 392, 24),
woosh.Token(woosh.NAME, '__self__', 392, 24, 392, 32),
woosh.Token(woosh.NEWLINE, '\r\n', 392, 32, 393, 0),
woosh.Token(woosh.COMMENT, '# Algorithm notes for nlargest() and nsmallest()', 395, 0, 395, 48),
woosh.Token(woosh.COMMENT, '# ==============================================', 396, 0, 396, 48),
woosh.Token(woosh.COMMENT, '#', 397, 0, 397, 1),
woosh.Token(woosh.COMMENT, '# Make a single pass over the data while keeping the k most extreme values', 398, 0, 398, 74),
woosh.Token(woosh.COMMENT, '# in a heap.  Memory consumption is limited to keeping k values in a list.', 399, 0, 399, 74),
woosh.Token(woosh.COMMENT, '#', 400, 0, 400, 1),
woosh.Token(woosh.COMMENT, '# Measured performance for random inputs:', 401, 0, 401, 41),
woosh.Token(woosh.COMMENT, '#', 402, 0, 402, 1),
woosh.Token(woosh.COMMENT, '#                                   number of comparisons', 403, 0, 403, 57),
woosh.Token(woosh.COMMENT, '#    n inputs     k-extreme values  (average of 5 trials)   % more than min()', 404, 0, 404, 77),
woosh.Token(woosh.COMMENT, '# -------------   ----------------  ---------------------   -----------------', 405, 0, 405, 77),
woosh.Token(woosh.COMMENT, '#      1,000           100                  3,317               231.7%', 406, 0, 406, 70),
woosh.Token(woosh.COMMENT, '#     10,000           100                 14,046                40.5%', 407, 0, 407, 70),
woosh.Token(woosh.COMMENT, '#    100,000           100                105,749                 5.7%', 408, 0, 408, 70),
woosh.Token(woosh.COMMENT, '#  1,000,000           100              1,007,751                 0.8%', 409, 0, 409, 70),
woosh.Token(woosh.COMMENT, '# 10,000,000           100             10,009,401                 0.1%', 410, 0, 410, 70),
woosh.Token(woosh.COMMENT, '#', 411, 0, 411, 1),
woosh.Token(woosh.COMMENT, '# Theoretical number of comparisons for k smallest of n random inputs:', 412, 0, 412, 70),
woosh.Token(woosh.COMMENT, '#', 413, 0, 413, 1),
woosh.Token(woosh.COMMENT, '# Step   Comparisons                  Action', 414, 0, 414, 44),
woosh.Token(woosh.COMMENT, '# ----   --------------------------   ---------------------------', 415, 0, 415, 65),
woosh.Token(woosh.COMMENT, '#  1     1.66 * k                     heapify the first k-inputs', 416, 0, 416, 64),
woosh.Token(woosh.COMMENT, '#  2     n - k                        compare remaining elements to top of heap', 417, 0, 417, 79),
woosh.Token(woosh.COMMENT, '#  3     k * (1 + lg2(k)) * ln(n/k)   replace the topmost value on the heap', 418, 0, 418, 75),
woosh.Token(woosh.COMMENT, '#  4     k * lg2(k) - (k/2)           final sort of the k most extreme values', 419, 0, 419, 77),
woosh.Token(woosh.COMMENT, '#', 420, 0, 420, 1),
woosh.Token(woosh.COMMENT, '# Combining and simplifying for a rough estimate gives:', 421, 0, 421, 55),
woosh.Token(woosh.COMMENT, '#', 422, 0, 422, 1),
woosh.Token(woosh.COMMENT, '#        comparisons = n + k * (log(k, 2) * log(n/k) + log(k, 2) + log(n/k))', 423, 0, 423, 76),
woosh.Token(woosh.COMMENT, '#', 424, 0, 424, 1),
woosh.Token(woosh.COMMENT, '# Computing the number of comparisons for step 3:', 425, 0, 425, 49),
woosh.Token(woosh.COMMENT, '# -----------------------------------------------', 426, 0, 426, 49),
woosh.Token(woosh.COMMENT, '# * For the i-th new value from the iterable, the probability of being in the', 427, 0, 427, 77),
woosh.Token(woosh.COMMENT, '#   k most extreme values is k/i.  For example, the probability of the 101st', 428, 0, 428, 76),
woosh.Token(woosh.COMMENT, '#   value seen being in the 100 most extreme values is 100/101.', 429, 0, 429, 63),
woosh.Token(woosh.COMMENT, '# * If the value is a new extreme value, the cost of inserting it into the', 430, 0, 430, 74),
woosh.Token(woosh.COMMENT, '#   heap is 1 + log(k, 2).', 431, 0, 431, 26),
woosh.Token(woosh.COMMENT, '# * The probability times the cost gives:', 432, 0, 432, 41),
woosh.Token(woosh.COMMENT, '#            (k/i) * (1 + log(k, 2))', 433, 0, 433, 36),
woosh.Token(woosh.COMMENT, '# * Summing across the remaining n-k elements gives:', 434, 0, 434, 52),
woosh.Token(woosh.COMMENT, '#            sum((k/i) * (1 + log(k, 2)) for i in range(k+1, n+1))', 435, 0, 435, 66),
woosh.Token(woosh.COMMENT, '# * This reduces to:', 436, 0, 436, 20),
woosh.Token(woosh.COMMENT, '#            (H(n) - H(k)) * k * (1 + log(k, 2))', 437, 0, 437, 48),
woosh.Token(woosh.COMMENT, '# * Where H(n) is the n-th harmonic number estimated by:', 438, 0, 438, 56),
woosh.Token(woosh.COMMENT, '#            gamma = 0.5772156649', 439, 0, 439, 33),
woosh.Token(woosh.COMMENT, '#            H(n) = log(n, e) + gamma + 1 / (2 * n)', 440, 0, 440, 51),
woosh.Token(woosh.COMMENT, '#   http://en.wikipedia.org/wiki/Harmonic_series_(mathematics)#Rate_of_divergence', 441, 0, 441, 81),
woosh.Token(woosh.COMMENT, '# * Substituting the H(n) formula:', 442, 0, 442, 34),
woosh.Token(woosh.COMMENT, '#            comparisons = k * (1 + log(k, 2)) * (log(n/k, e) + (1/n - 1/k) / 2)', 443, 0, 443, 80),
woosh.Token(woosh.COMMENT, '#', 444, 0, 444, 1),
woosh.Token(woosh.COMMENT, '# Worst-case for step 3:', 445, 0, 445, 24),
woosh.Token(woosh.COMMENT, '# ----------------------', 446, 0, 446, 24),
woosh.Token(woosh.COMMENT, '# In the worst case, the input data is reversed sorted so that every new element', 447, 0, 447, 80),
woosh.Token(woosh.COMMENT, '# must be inserted in the heap:', 448, 0, 448, 31),
woosh.Token(woosh.COMMENT, '#', 449, 0, 449, 1),
woosh.Token(woosh.COMMENT, '#             comparisons = 1.66 * k + log(k, 2) * (n - k)', 450, 0, 450, 58),
woosh.Token(woosh.COMMENT, '#', 451, 0, 451, 1),
woosh.Token(woosh.COMMENT, '# Alternative Algorithms', 452, 0, 452, 24),
woosh.Token(woosh.COMMENT, '# ----------------------', 453, 0, 453, 24),
woosh.Token(woosh.COMMENT, '# Other algorithms were not used because they:', 454, 0, 454, 46),
woosh.Token(woosh.COMMENT, '# 1) Took much more auxiliary memory,', 455, 0, 455, 37),
woosh.Token(woosh.COMMENT, '# 2) Made multiple passes over the data.', 456, 0, 456, 40),
woosh.Token(woosh.COMMENT, '# 3) Made more comparisons in common cases (small k, large n, semi-random input).', 457, 0, 457, 81),
woosh.Token(woosh.COMMENT, '# See the more detailed comparison of approach at:', 458, 0, 458, 50),
woosh.Token(woosh.COMMENT, '# http://code.activestate.com/recipes/577573-compare-algorithms-for-heapqsmallest', 459, 0, 459, 81),
woosh.Token(woosh.DEDENT, '', 461, 0, 461, 0),
woosh.Token(woosh.DEDENT, '', 461, 0, 461, 0),
woosh.Token(woosh.NAME, 'def', 461, 0, 461, 3),
woosh.Token(woosh.NAME, 'nsmallest', 461, 4, 461, 13),
woosh.Token(woosh.OP, '(', 461, 13, 461, 14),
woosh.Token(woosh.NAME, 'n', 461, 14, 461, 15),
woosh.Token(woosh.OP, ',', 461, 15, 461, 16),
woosh.Token(woosh.NAME, 'iterable', 461, 17, 461, 25),
woosh.Token(woosh.OP, ',', 461, 25, 461, 26),
woosh.Token(woosh.NAME, 'key', 461, 27, 461, 30),
woosh.Token(woosh.OP, '=', 461, 30, 461, 31),
woosh.Token(woosh.NAME, 'None', 461, 31, 461, 35),
woosh.Token(woosh.OP, ')', 461, 35, 461, 36),
woosh.Token(woosh.OP, ':', 461, 36, 461, 37),
woosh.Token(woosh.NEWLINE, '\r\n', 461, 37, 462, 0),
woosh.Token(woosh.INDENT, '    ', 462, 0, 462, 4),
woosh.Token(woosh.STRING, '"""Find the n smallest elements in a dataset.\r\n\r\n    Equivalent to:  sorted(iterable, key=key)[:n]\r\n    """', 462, 4, 465, 7),
woosh.Token(woosh.NEWLINE, '\r\n', 465, 7, 466, 0),
woosh.Token(woosh.COMMENT, '# Short-cut for n==1 is to use min()', 467, 4, 467, 40),
woosh.Token(woosh.NAME, 'if', 468, 4, 468, 6),
woosh.Token(woosh.NAME, 'n', 468, 7, 468, 8),
woosh.Token(woosh.OP, '==', 468, 9, 468, 11),
woosh.Token(woosh.NUMBER, '1', 468, 12, 468, 13),
woosh.Token(woosh.OP, ':', 468, 13, 468, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 468, 14, 469, 0),
woosh.Token(woosh.INDENT, '        ', 469, 0, 469, 8),
woosh.Token(woosh.NAME, 'it', 469, 8, 469, 10),
woosh.Token(woosh.OP, '=', 469, 11, 469, 12),
woosh.Token(woosh.NAME, 'iter', 469, 13, 469, 17),
woosh.Token(woosh.OP, '(', 469, 17, 469, 18),
woosh.Token(woosh.NAME, 'iterable', 469, 18, 469, 26),
woosh.Token(woosh.OP, ')', 469, 26, 469, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 469, 27, 470, 0),
woosh.Token(woosh.NAME, 'sentinel', 470, 8, 470, 16),
woosh.Token(woosh.OP, '=', 470, 17, 470, 18),
woosh.Token(woosh.NAME, 'object', 470, 19, 470, 25),
woosh.Token(woosh.OP, '(', 470, 25, 470, 26),
woosh.Token(woosh.OP, ')', 470, 26, 470, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 470, 27, 471, 0),
woosh.Token(woosh.NAME, 'result', 471, 8, 471, 14),
woosh.Token(woosh.OP, '=', 471, 15, 471, 16),
woosh.Token(woosh.NAME, 'min', 471, 17, 471, 20),
woosh.Token(woosh.OP, '(', 471, 20, 471, 21),
woosh.Token(woosh.NAME, 'it', 471, 21, 471, 23),
woosh.Token(woosh.OP, ',', 471, 23, 471, 24),
woosh.Token(woosh.NAME, 'default', 471, 25, 471, 32),
woosh.Token(woosh.OP, '=', 471, 32, 471, 33),
woosh.Token(woosh.NAME, 'sentinel', 471, 33, 471, 41),
woosh.Token(woosh.OP, ',', 471, 41, 471, 42),
woosh.Token(woosh.NAME, 'key', 471, 43, 471, 46),
woosh.Token(woosh.OP, '=', 471, 46, 471, 47),
woosh.Token(woosh.NAME, 'key', 471, 47, 471, 50),
woosh.Token(woosh.OP, ')', 471, 50, 471, 51),
woosh.Token(woosh.NEWLINE, '\r\n', 471, 51, 472, 0),
woosh.Token(woosh.NAME, 'return', 472, 8, 472, 14),
woosh.Token(woosh.OP, '[', 472, 15, 472, 16),
woosh.Token(woosh.OP, ']', 472, 16, 472, 17),
woosh.Token(woosh.NAME, 'if', 472, 18, 472, 20),
woosh.Token(woosh.NAME, 'result', 472, 21, 472, 27),
woosh.Token(woosh.NAME, 'is', 472, 28, 472, 30),
woosh.Token(woosh.NAME, 'sentinel', 472, 31, 472, 39),
woosh.Token(woosh.NAME, 'else', 472, 40, 472, 44),
woosh.Token(woosh.OP, '[', 472, 45, 472, 46),
woosh.Token(woosh.NAME, 'result', 472, 46, 472, 52),
woosh.Token(woosh.OP, ']', 472, 52, 472, 53),
woosh.Token(woosh.NEWLINE, '\r\n', 472, 53, 473, 0),
woosh.Token(woosh.COMMENT, "# When n>=size, it's faster to use sorted()", 474, 4, 474, 47),
woosh.Token(woosh.DEDENT, '    ', 475, 0, 475, 4),
woosh.Token(woosh.NAME, 'try', 475, 4, 475, 7),
woosh.Token(woosh.OP, ':', 475, 7, 475, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 475, 8, 476, 0),
woosh.Token(woosh.INDENT, '        ', 476, 0, 476, 8),
woosh.Token(woosh.NAME, 'size', 476, 8, 476, 12),
woosh.Token(woosh.OP, '=', 476, 13, 476, 14),
woosh.Token(woosh.NAME, 'len', 476, 15, 476, 18),
woosh.Token(woosh.OP, '(', 476, 18, 476, 19),
woosh.Token(woosh.NAME, 'iterable', 476, 19, 476, 27),
woosh.Token(woosh.OP, ')', 476, 27, 476, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 476, 28, 477, 0),
woosh.Token(woosh.DEDENT, '    ', 477, 0, 477, 4),
woosh.Token(woosh.NAME, 'except', 477, 4, 477, 10),
woosh.Token(woosh.OP, '(', 477, 11, 477, 12),
woosh.Token(woosh.NAME, 'TypeError', 477, 12, 477, 21),
woosh.Token(woosh.OP, ',', 477, 21, 477, 22),
woosh.Token(woosh.NAME, 'AttributeError', 477, 23, 477, 37),
woosh.Token(woosh.OP, ')', 477, 37, 477, 38),
woosh.Token(woosh.OP, ':', 477, 38, 477, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 477, 39, 478, 0),
woosh.Token(woosh.INDENT, '        ', 478, 0, 478, 8),
woosh.Token(woosh.NAME, 'pass', 478, 8, 478, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 478, 12, 479, 0),
woosh.Token(woosh.DEDENT, '    ', 479, 0, 479, 4),
woosh.Token(woosh.NAME, 'else', 479, 4, 479, 8),
woosh.Token(woosh.OP, ':', 479, 8, 479, 9),
woosh.Token(woosh.NEWLINE, '\r\n', 479, 9, 480, 0),
woosh.Token(woosh.INDENT, '        ', 480, 0, 480, 8),
woosh.Token(woosh.NAME, 'if', 480, 8, 480, 10),
woosh.Token(woosh.NAME, 'n', 480, 11, 480, 12),
woosh.Token(woosh.OP, '>=', 480, 13, 480, 15),
woosh.Token(woosh.NAME, 'size', 480, 16, 480, 20),
woosh.Token(woosh.OP, ':', 480, 20, 480, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 480, 21, 481, 0),
woosh.Token(woosh.INDENT, '            ', 481, 0, 481, 12),
woosh.Token(woosh.NAME, 'return', 481, 12, 481, 18),
woosh.Token(woosh.NAME, 'sorted', 481, 19, 481, 25),
woosh.Token(woosh.OP, '(', 481, 25, 481, 26),
woosh.Token(woosh.NAME, 'iterable', 481, 26, 481, 34),
woosh.Token(woosh.OP, ',', 481, 34, 481, 35),
woosh.Token(woosh.NAME, 'key', 481, 36, 481, 39),
woosh.Token(woosh.OP, '=', 481, 39, 481, 40),
woosh.Token(woosh.NAME, 'key', 481, 40, 481, 43),
woosh.Token(woosh.OP, ')', 481, 43, 481, 44),
woosh.Token(woosh.OP, '[', 481, 44, 481, 45),
woosh.Token(woosh.OP, ':', 481, 45, 481, 46),
woosh.Token(woosh.NAME, 'n', 481, 46, 481, 47),
woosh.Token(woosh.OP, ']', 481, 47, 481, 48),
woosh.Token(woosh.NEWLINE, '\r\n', 481, 48, 482, 0),
woosh.Token(woosh.COMMENT, '# When key is none, use simpler decoration', 483, 4, 483, 46),
woosh.Token(woosh.DEDENT, '    ', 484, 0, 484, 4),
woosh.Token(woosh.DEDENT, '', 484, 4, 484, 4),
woosh.Token(woosh.NAME, 'if', 484, 4, 484, 6),
woosh.Token(woosh.NAME, 'key', 484, 7, 484, 10),
woosh.Token(woosh.NAME, 'is', 484, 11, 484, 13),
woosh.Token(woosh.NAME, 'None', 484, 14, 484, 18),
woosh.Token(woosh.OP, ':', 484, 18, 484, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 484, 19, 485, 0),
woosh.Token(woosh.INDENT, '        ', 485, 0, 485, 8),
woosh.Token(woosh.NAME, 'it', 485, 8, 485, 10),
woosh.Token(woosh.OP, '=', 485, 11, 485, 12),
woosh.Token(woosh.NAME, 'iter', 485, 13, 485, 17),
woosh.Token(woosh.OP, '(', 485, 17, 485, 18),
woosh.Token(woosh.NAME, 'iterable', 485, 18, 485, 26),
woosh.Token(woosh.OP, ')', 485, 26, 485, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 485, 27, 486, 0),
woosh.Token(woosh.COMMENT, "# put the range(n) first so that zip() doesn't", 486, 8, 486, 54),
woosh.Token(woosh.COMMENT, '# consume one too many elements from the iterator', 487, 8, 487, 57),
woosh.Token(woosh.NAME, 'result', 488, 8, 488, 14),
woosh.Token(woosh.OP, '=', 488, 15, 488, 16),
woosh.Token(woosh.OP, '[', 488, 17, 488, 18),
woosh.Token(woosh.OP, '(', 488, 18, 488, 19),
woosh.Token(woosh.NAME, 'elem', 488, 19, 488, 23),
woosh.Token(woosh.OP, ',', 488, 23, 488, 24),
woosh.Token(woosh.NAME, 'i', 488, 25, 488, 26),
woosh.Token(woosh.OP, ')', 488, 26, 488, 27),
woosh.Token(woosh.NAME, 'for', 488, 28, 488, 31),
woosh.Token(woosh.NAME, 'i', 488, 32, 488, 33),
woosh.Token(woosh.OP, ',', 488, 33, 488, 34),
woosh.Token(woosh.NAME, 'elem', 488, 35, 488, 39),
woosh.Token(woosh.NAME, 'in', 488, 40, 488, 42),
woosh.Token(woosh.NAME, 'zip', 488, 43, 488, 46),
woosh.Token(woosh.OP, '(', 488, 46, 488, 47),
woosh.Token(woosh.NAME, 'range', 488, 47, 488, 52),
woosh.Token(woosh.OP, '(', 488, 52, 488, 53),
woosh.Token(woosh.NAME, 'n', 488, 53, 488, 54),
woosh.Token(woosh.OP, ')', 488, 54, 488, 55),
woosh.Token(woosh.OP, ',', 488, 55, 488, 56),
woosh.Token(woosh.NAME, 'it', 488, 57, 488, 59),
woosh.Token(woosh.OP, ')', 488, 59, 488, 60),
woosh.Token(woosh.OP, ']', 488, 60, 488, 61),
woosh.Token(woosh.NEWLINE, '\r\n', 488, 61, 489, 0),
woosh.Token(woosh.NAME, 'if', 489, 8, 489, 10),
woosh.Token(woosh.NAME, 'not', 489, 11, 489, 14),
woosh.Token(woosh.NAME, 'result', 489, 15, 489, 21),
woosh.Token(woosh.OP, ':', 489, 21, 489, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 489, 22, 490, 0),
woosh.Token(woosh.INDENT, '            ', 490, 0, 490, 12),
woosh.Token(woosh.NAME, 'return', 490, 12, 490, 18),
woosh.Token(woosh.NAME, 'result', 490, 19, 490, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 490, 25, 491, 0),
woosh.Token(woosh.DEDENT, '        ', 491, 0, 491, 8),
woosh.Token(woosh.NAME, '_heapify_max', 491, 8, 491, 20),
woosh.Token(woosh.OP, '(', 491, 20, 491, 21),
woosh.Token(woosh.NAME, 'result', 491, 21, 491, 27),
woosh.Token(woosh.OP, ')', 491, 27, 491, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 491, 28, 492, 0),
woosh.Token(woosh.NAME, 'top', 492, 8, 492, 11),
woosh.Token(woosh.OP, '=', 492, 12, 492, 13),
woosh.Token(woosh.NAME, 'result', 492, 14, 492, 20),
woosh.Token(woosh.OP, '[', 492, 20, 492, 21),
woosh.Token(woosh.NUMBER, '0', 492, 21, 492, 22),
woosh.Token(woosh.OP, ']', 492, 22, 492, 23),
woosh.Token(woosh.OP, '[', 492, 23, 492, 24),
woosh.Token(woosh.NUMBER, '0', 492, 24, 492, 25),
woosh.Token(woosh.OP, ']', 492, 25, 492, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 492, 26, 493, 0),
woosh.Token(woosh.NAME, 'order', 493, 8, 493, 13),
woosh.Token(woosh.OP, '=', 493, 14, 493, 15),
woosh.Token(woosh.NAME, 'n', 493, 16, 493, 17),
woosh.Token(woosh.NEWLINE, '\r\n', 493, 17, 494, 0),
woosh.Token(woosh.NAME, '_heapreplace', 494, 8, 494, 20),
woosh.Token(woosh.OP, '=', 494, 21, 494, 22),
woosh.Token(woosh.NAME, '_heapreplace_max', 494, 23, 494, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 494, 39, 495, 0),
woosh.Token(woosh.NAME, 'for', 495, 8, 495, 11),
woosh.Token(woosh.NAME, 'elem', 495, 12, 495, 16),
woosh.Token(woosh.NAME, 'in', 495, 17, 495, 19),
woosh.Token(woosh.NAME, 'it', 495, 20, 495, 22),
woosh.Token(woosh.OP, ':', 495, 22, 495, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 495, 23, 496, 0),
woosh.Token(woosh.INDENT, '            ', 496, 0, 496, 12),
woosh.Token(woosh.NAME, 'if', 496, 12, 496, 14),
woosh.Token(woosh.NAME, 'elem', 496, 15, 496, 19),
woosh.Token(woosh.OP, '<', 496, 20, 496, 21),
woosh.Token(woosh.NAME, 'top', 496, 22, 496, 25),
woosh.Token(woosh.OP, ':', 496, 25, 496, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 496, 26, 497, 0),
woosh.Token(woosh.INDENT, '                ', 497, 0, 497, 16),
woosh.Token(woosh.NAME, '_heapreplace', 497, 16, 497, 28),
woosh.Token(woosh.OP, '(', 497, 28, 497, 29),
woosh.Token(woosh.NAME, 'result', 497, 29, 497, 35),
woosh.Token(woosh.OP, ',', 497, 35, 497, 36),
woosh.Token(woosh.OP, '(', 497, 37, 497, 38),
woosh.Token(woosh.NAME, 'elem', 497, 38, 497, 42),
woosh.Token(woosh.OP, ',', 497, 42, 497, 43),
woosh.Token(woosh.NAME, 'order', 497, 44, 497, 49),
woosh.Token(woosh.OP, ')', 497, 49, 497, 50),
woosh.Token(woosh.OP, ')', 497, 50, 497, 51),
woosh.Token(woosh.NEWLINE, '\r\n', 497, 51, 498, 0),
woosh.Token(woosh.NAME, 'top', 498, 16, 498, 19),
woosh.Token(woosh.OP, ',', 498, 19, 498, 20),
woosh.Token(woosh.NAME, '_order', 498, 21, 498, 27),
woosh.Token(woosh.OP, '=', 498, 28, 498, 29),
woosh.Token(woosh.NAME, 'result', 498, 30, 498, 36),
woosh.Token(woosh.OP, '[', 498, 36, 498, 37),
woosh.Token(woosh.NUMBER, '0', 498, 37, 498, 38),
woosh.Token(woosh.OP, ']', 498, 38, 498, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 498, 39, 499, 0),
woosh.Token(woosh.NAME, 'order', 499, 16, 499, 21),
woosh.Token(woosh.OP, '+=', 499, 22, 499, 24),
woosh.Token(woosh.NUMBER, '1', 499, 25, 499, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 499, 26, 500, 0),
woosh.Token(woosh.DEDENT, '        ', 500, 0, 500, 8),
woosh.Token(woosh.DEDENT, '', 500, 8, 500, 8),
woosh.Token(woosh.NAME, 'result', 500, 8, 500, 14),
woosh.Token(woosh.OP, '.', 500, 14, 500, 15),
woosh.Token(woosh.NAME, 'sort', 500, 15, 500, 19),
woosh.Token(woosh.OP, '(', 500, 19, 500, 20),
woosh.Token(woosh.OP, ')', 500, 20, 500, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 500, 21, 501, 0),
woosh.Token(woosh.NAME, 'return', 501, 8, 501, 14),
woosh.Token(woosh.OP, '[', 501, 15, 501, 16),
woosh.Token(woosh.NAME, 'elem', 501, 16, 501, 20),
woosh.Token(woosh.NAME, 'for', 501, 21, 501, 24),
woosh.Token(woosh.OP, '(', 501, 25, 501, 26),
woosh.Token(woosh.NAME, 'elem', 501, 26, 501, 30),
woosh.Token(woosh.OP, ',', 501, 30, 501, 31),
woosh.Token(woosh.NAME, 'order', 501, 32, 501, 37),
woosh.Token(woosh.OP, ')', 501, 37, 501, 38),
woosh.Token(woosh.NAME, 'in', 501, 39, 501, 41),
woosh.Token(woosh.NAME, 'result', 501, 42, 501, 48),
woosh.Token(woosh.OP, ']', 501, 48, 501, 49),
woosh.Token(woosh.NEWLINE, '\r\n', 501, 49, 502, 0),
woosh.Token(woosh.COMMENT, '# General case, slowest method', 503, 4, 503, 34),
woosh.Token(woosh.DEDENT, '    ', 504, 0, 504, 4),
woosh.Token(woosh.NAME, 'it', 504, 4, 504, 6),
woosh.Token(woosh.OP, '=', 504, 7, 504, 8),
woosh.Token(woosh.NAME, 'iter', 504, 9, 504, 13),
woosh.Token(woosh.OP, '(', 504, 13, 504, 14),
woosh.Token(woosh.NAME, 'iterable', 504, 14, 504, 22),
woosh.Token(woosh.OP, ')', 504, 22, 504, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 504, 23, 505, 0),
woosh.Token(woosh.NAME, 'result', 505, 4, 505, 10),
woosh.Token(woosh.OP, '=', 505, 11, 505, 12),
woosh.Token(woosh.OP, '[', 505, 13, 505, 14),
woosh.Token(woosh.OP, '(', 505, 14, 505, 15),
woosh.Token(woosh.NAME, 'key', 505, 15, 505, 18),
woosh.Token(woosh.OP, '(', 505, 18, 505, 19),
woosh.Token(woosh.NAME, 'elem', 505, 19, 505, 23),
woosh.Token(woosh.OP, ')', 505, 23, 505, 24),
woosh.Token(woosh.OP, ',', 505, 24, 505, 25),
woosh.Token(woosh.NAME, 'i', 505, 26, 505, 27),
woosh.Token(woosh.OP, ',', 505, 27, 505, 28),
woosh.Token(woosh.NAME, 'elem', 505, 29, 505, 33),
woosh.Token(woosh.OP, ')', 505, 33, 505, 34),
woosh.Token(woosh.NAME, 'for', 505, 35, 505, 38),
woosh.Token(woosh.NAME, 'i', 505, 39, 505, 40),
woosh.Token(woosh.OP, ',', 505, 40, 505, 41),
woosh.Token(woosh.NAME, 'elem', 505, 42, 505, 46),
woosh.Token(woosh.NAME, 'in', 505, 47, 505, 49),
woosh.Token(woosh.NAME, 'zip', 505, 50, 505, 53),
woosh.Token(woosh.OP, '(', 505, 53, 505, 54),
woosh.Token(woosh.NAME, 'range', 505, 54, 505, 59),
woosh.Token(woosh.OP, '(', 505, 59, 505, 60),
woosh.Token(woosh.NAME, 'n', 505, 60, 505, 61),
woosh.Token(woosh.OP, ')', 505, 61, 505, 62),
woosh.Token(woosh.OP, ',', 505, 62, 505, 63),
woosh.Token(woosh.NAME, 'it', 505, 64, 505, 66),
woosh.Token(woosh.OP, ')', 505, 66, 505, 67),
woosh.Token(woosh.OP, ']', 505, 67, 505, 68),
woosh.Token(woosh.NEWLINE, '\r\n', 505, 68, 506, 0),
woosh.Token(woosh.NAME, 'if', 506, 4, 506, 6),
woosh.Token(woosh.NAME, 'not', 506, 7, 506, 10),
woosh.Token(woosh.NAME, 'result', 506, 11, 506, 17),
woosh.Token(woosh.OP, ':', 506, 17, 506, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 506, 18, 507, 0),
woosh.Token(woosh.INDENT, '        ', 507, 0, 507, 8),
woosh.Token(woosh.NAME, 'return', 507, 8, 507, 14),
woosh.Token(woosh.NAME, 'result', 507, 15, 507, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 507, 21, 508, 0),
woosh.Token(woosh.DEDENT, '    ', 508, 0, 508, 4),
woosh.Token(woosh.NAME, '_heapify_max', 508, 4, 508, 16),
woosh.Token(woosh.OP, '(', 508, 16, 508, 17),
woosh.Token(woosh.NAME, 'result', 508, 17, 508, 23),
woosh.Token(woosh.OP, ')', 508, 23, 508, 24),
woosh.Token(woosh.NEWLINE, '\r\n', 508, 24, 509, 0),
woosh.Token(woosh.NAME, 'top', 509, 4, 509, 7),
woosh.Token(woosh.OP, '=', 509, 8, 509, 9),
woosh.Token(woosh.NAME, 'result', 509, 10, 509, 16),
woosh.Token(woosh.OP, '[', 509, 16, 509, 17),
woosh.Token(woosh.NUMBER, '0', 509, 17, 509, 18),
woosh.Token(woosh.OP, ']', 509, 18, 509, 19),
woosh.Token(woosh.OP, '[', 509, 19, 509, 20),
woosh.Token(woosh.NUMBER, '0', 509, 20, 509, 21),
woosh.Token(woosh.OP, ']', 509, 21, 509, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 509, 22, 510, 0),
woosh.Token(woosh.NAME, 'order', 510, 4, 510, 9),
woosh.Token(woosh.OP, '=', 510, 10, 510, 11),
woosh.Token(woosh.NAME, 'n', 510, 12, 510, 13),
woosh.Token(woosh.NEWLINE, '\r\n', 510, 13, 511, 0),
woosh.Token(woosh.NAME, '_heapreplace', 511, 4, 511, 16),
woosh.Token(woosh.OP, '=', 511, 17, 511, 18),
woosh.Token(woosh.NAME, '_heapreplace_max', 511, 19, 511, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 511, 35, 512, 0),
woosh.Token(woosh.NAME, 'for', 512, 4, 512, 7),
woosh.Token(woosh.NAME, 'elem', 512, 8, 512, 12),
woosh.Token(woosh.NAME, 'in', 512, 13, 512, 15),
woosh.Token(woosh.NAME, 'it', 512, 16, 512, 18),
woosh.Token(woosh.OP, ':', 512, 18, 512, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 512, 19, 513, 0),
woosh.Token(woosh.INDENT, '        ', 513, 0, 513, 8),
woosh.Token(woosh.NAME, 'k', 513, 8, 513, 9),
woosh.Token(woosh.OP, '=', 513, 10, 513, 11),
woosh.Token(woosh.NAME, 'key', 513, 12, 513, 15),
woosh.Token(woosh.OP, '(', 513, 15, 513, 16),
woosh.Token(woosh.NAME, 'elem', 513, 16, 513, 20),
woosh.Token(woosh.OP, ')', 513, 20, 513, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 513, 21, 514, 0),
woosh.Token(woosh.NAME, 'if', 514, 8, 514, 10),
woosh.Token(woosh.NAME, 'k', 514, 11, 514, 12),
woosh.Token(woosh.OP, '<', 514, 13, 514, 14),
woosh.Token(woosh.NAME, 'top', 514, 15, 514, 18),
woosh.Token(woosh.OP, ':', 514, 18, 514, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 514, 19, 515, 0),
woosh.Token(woosh.INDENT, '            ', 515, 0, 515, 12),
woosh.Token(woosh.NAME, '_heapreplace', 515, 12, 515, 24),
woosh.Token(woosh.OP, '(', 515, 24, 515, 25),
woosh.Token(woosh.NAME, 'result', 515, 25, 515, 31),
woosh.Token(woosh.OP, ',', 515, 31, 515, 32),
woosh.Token(woosh.OP, '(', 515, 33, 515, 34),
woosh.Token(woosh.NAME, 'k', 515, 34, 515, 35),
woosh.Token(woosh.OP, ',', 515, 35, 515, 36),
woosh.Token(woosh.NAME, 'order', 515, 37, 515, 42),
woosh.Token(woosh.OP, ',', 515, 42, 515, 43),
woosh.Token(woosh.NAME, 'elem', 515, 44, 515, 48),
woosh.Token(woosh.OP, ')', 515, 48, 515, 49),
woosh.Token(woosh.OP, ')', 515, 49, 515, 50),
woosh.Token(woosh.NEWLINE, '\r\n', 515, 50, 516, 0),
woosh.Token(woosh.NAME, 'top', 516, 12, 516, 15),
woosh.Token(woosh.OP, ',', 516, 15, 516, 16),
woosh.Token(woosh.NAME, '_order', 516, 17, 516, 23),
woosh.Token(woosh.OP, ',', 516, 23, 516, 24),
woosh.Token(woosh.NAME, '_elem', 516, 25, 516, 30),
woosh.Token(woosh.OP, '=', 516, 31, 516, 32),
woosh.Token(woosh.NAME, 'result', 516, 33, 516, 39),
woosh.Token(woosh.OP, '[', 516, 39, 516, 40),
woosh.Token(woosh.NUMBER, '0', 516, 40, 516, 41),
woosh.Token(woosh.OP, ']', 516, 41, 516, 42),
woosh.Token(woosh.NEWLINE, '\r\n', 516, 42, 517, 0),
woosh.Token(woosh.NAME, 'order', 517, 12, 517, 17),
woosh.Token(woosh.OP, '+=', 517, 18, 517, 20),
woosh.Token(woosh.NUMBER, '1', 517, 21, 517, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 517, 22, 518, 0),
woosh.Token(woosh.DEDENT, '    ', 518, 0, 518, 4),
woosh.Token(woosh.DEDENT, '', 518, 4, 518, 4),
woosh.Token(woosh.NAME, 'result', 518, 4, 518, 10),
woosh.Token(woosh.OP, '.', 518, 10, 518, 11),
woosh.Token(woosh.NAME, 'sort', 518, 11, 518, 15),
woosh.Token(woosh.OP, '(', 518, 15, 518, 16),
woosh.Token(woosh.OP, ')', 518, 16, 518, 17),
woosh.Token(woosh.NEWLINE, '\r\n', 518, 17, 519, 0),
woosh.Token(woosh.NAME, 'return', 519, 4, 519, 10),
woosh.Token(woosh.OP, '[', 519, 11, 519, 12),
woosh.Token(woosh.NAME, 'elem', 519, 12, 519, 16),
woosh.Token(woosh.NAME, 'for', 519, 17, 519, 20),
woosh.Token(woosh.OP, '(', 519, 21, 519, 22),
woosh.Token(woosh.NAME, 'k', 519, 22, 519, 23),
woosh.Token(woosh.OP, ',', 519, 23, 519, 24),
woosh.Token(woosh.NAME, 'order', 519, 25, 519, 30),
woosh.Token(woosh.OP, ',', 519, 30, 519, 31),
woosh.Token(woosh.NAME, 'elem', 519, 32, 519, 36),
woosh.Token(woosh.OP, ')', 519, 36, 519, 37),
woosh.Token(woosh.NAME, 'in', 519, 38, 519, 40),
woosh.Token(woosh.NAME, 'result', 519, 41, 519, 47),
woosh.Token(woosh.OP, ']', 519, 47, 519, 48),
woosh.Token(woosh.NEWLINE, '\r\n', 519, 48, 520, 0),
woosh.Token(woosh.DEDENT, '', 521, 0, 521, 0),
woosh.Token(woosh.NAME, 'def', 521, 0, 521, 3),
woosh.Token(woosh.NAME, 'nlargest', 521, 4, 521, 12),
woosh.Token(woosh.OP, '(', 521, 12, 521, 13),
woosh.Token(woosh.NAME, 'n', 521, 13, 521, 14),
woosh.Token(woosh.OP, ',', 521, 14, 521, 15),
woosh.Token(woosh.NAME, 'iterable', 521, 16, 521, 24),
woosh.Token(woosh.OP, ',', 521, 24, 521, 25),
woosh.Token(woosh.NAME, 'key', 521, 26, 521, 29),
woosh.Token(woosh.OP, '=', 521, 29, 521, 30),
woosh.Token(woosh.NAME, 'None', 521, 30, 521, 34),
woosh.Token(woosh.OP, ')', 521, 34, 521, 35),
woosh.Token(woosh.OP, ':', 521, 35, 521, 36),
woosh.Token(woosh.NEWLINE, '\r\n', 521, 36, 522, 0),
woosh.Token(woosh.INDENT, '    ', 522, 0, 522, 4),
woosh.Token(woosh.STRING, '"""Find the n largest elements in a dataset.\r\n\r\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\r\n    """', 522, 4, 525, 7),
woosh.Token(woosh.NEWLINE, '\r\n', 525, 7, 526, 0),
woosh.Token(woosh.COMMENT, '# Short-cut for n==1 is to use max()', 527, 4, 527, 40),
woosh.Token(woosh.NAME, 'if', 528, 4, 528, 6),
woosh.Token(woosh.NAME, 'n', 528, 7, 528, 8),
woosh.Token(woosh.OP, '==', 528, 9, 528, 11),
woosh.Token(woosh.NUMBER, '1', 528, 12, 528, 13),
woosh.Token(woosh.OP, ':', 528, 13, 528, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 528, 14, 529, 0),
woosh.Token(woosh.INDENT, '        ', 529, 0, 529, 8),
woosh.Token(woosh.NAME, 'it', 529, 8, 529, 10),
woosh.Token(woosh.OP, '=', 529, 11, 529, 12),
woosh.Token(woosh.NAME, 'iter', 529, 13, 529, 17),
woosh.Token(woosh.OP, '(', 529, 17, 529, 18),
woosh.Token(woosh.NAME, 'iterable', 529, 18, 529, 26),
woosh.Token(woosh.OP, ')', 529, 26, 529, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 529, 27, 530, 0),
woosh.Token(woosh.NAME, 'sentinel', 530, 8, 530, 16),
woosh.Token(woosh.OP, '=', 530, 17, 530, 18),
woosh.Token(woosh.NAME, 'object', 530, 19, 530, 25),
woosh.Token(woosh.OP, '(', 530, 25, 530, 26),
woosh.Token(woosh.OP, ')', 530, 26, 530, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 530, 27, 531, 0),
woosh.Token(woosh.NAME, 'result', 531, 8, 531, 14),
woosh.Token(woosh.OP, '=', 531, 15, 531, 16),
woosh.Token(woosh.NAME, 'max', 531, 17, 531, 20),
woosh.Token(woosh.OP, '(', 531, 20, 531, 21),
woosh.Token(woosh.NAME, 'it', 531, 21, 531, 23),
woosh.Token(woosh.OP, ',', 531, 23, 531, 24),
woosh.Token(woosh.NAME, 'default', 531, 25, 531, 32),
woosh.Token(woosh.OP, '=', 531, 32, 531, 33),
woosh.Token(woosh.NAME, 'sentinel', 531, 33, 531, 41),
woosh.Token(woosh.OP, ',', 531, 41, 531, 42),
woosh.Token(woosh.NAME, 'key', 531, 43, 531, 46),
woosh.Token(woosh.OP, '=', 531, 46, 531, 47),
woosh.Token(woosh.NAME, 'key', 531, 47, 531, 50),
woosh.Token(woosh.OP, ')', 531, 50, 531, 51),
woosh.Token(woosh.NEWLINE, '\r\n', 531, 51, 532, 0),
woosh.Token(woosh.NAME, 'return', 532, 8, 532, 14),
woosh.Token(woosh.OP, '[', 532, 15, 532, 16),
woosh.Token(woosh.OP, ']', 532, 16, 532, 17),
woosh.Token(woosh.NAME, 'if', 532, 18, 532, 20),
woosh.Token(woosh.NAME, 'result', 532, 21, 532, 27),
woosh.Token(woosh.NAME, 'is', 532, 28, 532, 30),
woosh.Token(woosh.NAME, 'sentinel', 532, 31, 532, 39),
woosh.Token(woosh.NAME, 'else', 532, 40, 532, 44),
woosh.Token(woosh.OP, '[', 532, 45, 532, 46),
woosh.Token(woosh.NAME, 'result', 532, 46, 532, 52),
woosh.Token(woosh.OP, ']', 532, 52, 532, 53),
woosh.Token(woosh.NEWLINE, '\r\n', 532, 53, 533, 0),
woosh.Token(woosh.COMMENT, "# When n>=size, it's faster to use sorted()", 534, 4, 534, 47),
woosh.Token(woosh.DEDENT, '    ', 535, 0, 535, 4),
woosh.Token(woosh.NAME, 'try', 535, 4, 535, 7),
woosh.Token(woosh.OP, ':', 535, 7, 535, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 535, 8, 536, 0),
woosh.Token(woosh.INDENT, '        ', 536, 0, 536, 8),
woosh.Token(woosh.NAME, 'size', 536, 8, 536, 12),
woosh.Token(woosh.OP, '=', 536, 13, 536, 14),
woosh.Token(woosh.NAME, 'len', 536, 15, 536, 18),
woosh.Token(woosh.OP, '(', 536, 18, 536, 19),
woosh.Token(woosh.NAME, 'iterable', 536, 19, 536, 27),
woosh.Token(woosh.OP, ')', 536, 27, 536, 28),
woosh.Token(woosh.NEWLINE, '\r\n', 536, 28, 537, 0),
woosh.Token(woosh.DEDENT, '    ', 537, 0, 537, 4),
woosh.Token(woosh.NAME, 'except', 537, 4, 537, 10),
woosh.Token(woosh.OP, '(', 537, 11, 537, 12),
woosh.Token(woosh.NAME, 'TypeError', 537, 12, 537, 21),
woosh.Token(woosh.OP, ',', 537, 21, 537, 22),
woosh.Token(woosh.NAME, 'AttributeError', 537, 23, 537, 37),
woosh.Token(woosh.OP, ')', 537, 37, 537, 38),
woosh.Token(woosh.OP, ':', 537, 38, 537, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 537, 39, 538, 0),
woosh.Token(woosh.INDENT, '        ', 538, 0, 538, 8),
woosh.Token(woosh.NAME, 'pass', 538, 8, 538, 12),
woosh.Token(woosh.NEWLINE, '\r\n', 538, 12, 539, 0),
woosh.Token(woosh.DEDENT, '    ', 539, 0, 539, 4),
woosh.Token(woosh.NAME, 'else', 539, 4, 539, 8),
woosh.Token(woosh.OP, ':', 539, 8, 539, 9),
woosh.Token(woosh.NEWLINE, '\r\n', 539, 9, 540, 0),
woosh.Token(woosh.INDENT, '        ', 540, 0, 540, 8),
woosh.Token(woosh.NAME, 'if', 540, 8, 540, 10),
woosh.Token(woosh.NAME, 'n', 540, 11, 540, 12),
woosh.Token(woosh.OP, '>=', 540, 13, 540, 15),
woosh.Token(woosh.NAME, 'size', 540, 16, 540, 20),
woosh.Token(woosh.OP, ':', 540, 20, 540, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 540, 21, 541, 0),
woosh.Token(woosh.INDENT, '            ', 541, 0, 541, 12),
woosh.Token(woosh.NAME, 'return', 541, 12, 541, 18),
woosh.Token(woosh.NAME, 'sorted', 541, 19, 541, 25),
woosh.Token(woosh.OP, '(', 541, 25, 541, 26),
woosh.Token(woosh.NAME, 'iterable', 541, 26, 541, 34),
woosh.Token(woosh.OP, ',', 541, 34, 541, 35),
woosh.Token(woosh.NAME, 'key', 541, 36, 541, 39),
woosh.Token(woosh.OP, '=', 541, 39, 541, 40),
woosh.Token(woosh.NAME, 'key', 541, 40, 541, 43),
woosh.Token(woosh.OP, ',', 541, 43, 541, 44),
woosh.Token(woosh.NAME, 'reverse', 541, 45, 541, 52),
woosh.Token(woosh.OP, '=', 541, 52, 541, 53),
woosh.Token(woosh.NAME, 'True', 541, 53, 541, 57),
woosh.Token(woosh.OP, ')', 541, 57, 541, 58),
woosh.Token(woosh.OP, '[', 541, 58, 541, 59),
woosh.Token(woosh.OP, ':', 541, 59, 541, 60),
woosh.Token(woosh.NAME, 'n', 541, 60, 541, 61),
woosh.Token(woosh.OP, ']', 541, 61, 541, 62),
woosh.Token(woosh.NEWLINE, '\r\n', 541, 62, 542, 0),
woosh.Token(woosh.COMMENT, '# When key is none, use simpler decoration', 543, 4, 543, 46),
woosh.Token(woosh.DEDENT, '    ', 544, 0, 544, 4),
woosh.Token(woosh.DEDENT, '', 544, 4, 544, 4),
woosh.Token(woosh.NAME, 'if', 544, 4, 544, 6),
woosh.Token(woosh.NAME, 'key', 544, 7, 544, 10),
woosh.Token(woosh.NAME, 'is', 544, 11, 544, 13),
woosh.Token(woosh.NAME, 'None', 544, 14, 544, 18),
woosh.Token(woosh.OP, ':', 544, 18, 544, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 544, 19, 545, 0),
woosh.Token(woosh.INDENT, '        ', 545, 0, 545, 8),
woosh.Token(woosh.NAME, 'it', 545, 8, 545, 10),
woosh.Token(woosh.OP, '=', 545, 11, 545, 12),
woosh.Token(woosh.NAME, 'iter', 545, 13, 545, 17),
woosh.Token(woosh.OP, '(', 545, 17, 545, 18),
woosh.Token(woosh.NAME, 'iterable', 545, 18, 545, 26),
woosh.Token(woosh.OP, ')', 545, 26, 545, 27),
woosh.Token(woosh.NEWLINE, '\r\n', 545, 27, 546, 0),
woosh.Token(woosh.NAME, 'result', 546, 8, 546, 14),
woosh.Token(woosh.OP, '=', 546, 15, 546, 16),
woosh.Token(woosh.OP, '[', 546, 17, 546, 18),
woosh.Token(woosh.OP, '(', 546, 18, 546, 19),
woosh.Token(woosh.NAME, 'elem', 546, 19, 546, 23),
woosh.Token(woosh.OP, ',', 546, 23, 546, 24),
woosh.Token(woosh.NAME, 'i', 546, 25, 546, 26),
woosh.Token(woosh.OP, ')', 546, 26, 546, 27),
woosh.Token(woosh.NAME, 'for', 546, 28, 546, 31),
woosh.Token(woosh.NAME, 'i', 546, 32, 546, 33),
woosh.Token(woosh.OP, ',', 546, 33, 546, 34),
woosh.Token(woosh.NAME, 'elem', 546, 35, 546, 39),
woosh.Token(woosh.NAME, 'in', 546, 40, 546, 42),
woosh.Token(woosh.NAME, 'zip', 546, 43, 546, 46),
woosh.Token(woosh.OP, '(', 546, 46, 546, 47),
woosh.Token(woosh.NAME, 'range', 546, 47, 546, 52),
woosh.Token(woosh.OP, '(', 546, 52, 546, 53),
woosh.Token(woosh.NUMBER, '0', 546, 53, 546, 54),
woosh.Token(woosh.OP, ',', 546, 54, 546, 55),
woosh.Token(woosh.OP, '-', 546, 56, 546, 57),
woosh.Token(woosh.NAME, 'n', 546, 57, 546, 58),
woosh.Token(woosh.OP, ',', 546, 58, 546, 59),
woosh.Token(woosh.OP, '-', 546, 60, 546, 61),
woosh.Token(woosh.NUMBER, '1', 546, 61, 546, 62),
woosh.Token(woosh.OP, ')', 546, 62, 546, 63),
woosh.Token(woosh.OP, ',', 546, 63, 546, 64),
woosh.Token(woosh.NAME, 'it', 546, 65, 546, 67),
woosh.Token(woosh.OP, ')', 546, 67, 546, 68),
woosh.Token(woosh.OP, ']', 546, 68, 546, 69),
woosh.Token(woosh.NEWLINE, '\r\n', 546, 69, 547, 0),
woosh.Token(woosh.NAME, 'if', 547, 8, 547, 10),
woosh.Token(woosh.NAME, 'not', 547, 11, 547, 14),
woosh.Token(woosh.NAME, 'result', 547, 15, 547, 21),
woosh.Token(woosh.OP, ':', 547, 21, 547, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 547, 22, 548, 0),
woosh.Token(woosh.INDENT, '            ', 548, 0, 548, 12),
woosh.Token(woosh.NAME, 'return', 548, 12, 548, 18),
woosh.Token(woosh.NAME, 'result', 548, 19, 548, 25),
woosh.Token(woosh.NEWLINE, '\r\n', 548, 25, 549, 0),
woosh.Token(woosh.DEDENT, '        ', 549, 0, 549, 8),
woosh.Token(woosh.NAME, 'heapify', 549, 8, 549, 15),
woosh.Token(woosh.OP, '(', 549, 15, 549, 16),
woosh.Token(woosh.NAME, 'result', 549, 16, 549, 22),
woosh.Token(woosh.OP, ')', 549, 22, 549, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 549, 23, 550, 0),
woosh.Token(woosh.NAME, 'top', 550, 8, 550, 11),
woosh.Token(woosh.OP, '=', 550, 12, 550, 13),
woosh.Token(woosh.NAME, 'result', 550, 14, 550, 20),
woosh.Token(woosh.OP, '[', 550, 20, 550, 21),
woosh.Token(woosh.NUMBER, '0', 550, 21, 550, 22),
woosh.Token(woosh.OP, ']', 550, 22, 550, 23),
woosh.Token(woosh.OP, '[', 550, 23, 550, 24),
woosh.Token(woosh.NUMBER, '0', 550, 24, 550, 25),
woosh.Token(woosh.OP, ']', 550, 25, 550, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 550, 26, 551, 0),
woosh.Token(woosh.NAME, 'order', 551, 8, 551, 13),
woosh.Token(woosh.OP, '=', 551, 14, 551, 15),
woosh.Token(woosh.OP, '-', 551, 16, 551, 17),
woosh.Token(woosh.NAME, 'n', 551, 17, 551, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 551, 18, 552, 0),
woosh.Token(woosh.NAME, '_heapreplace', 552, 8, 552, 20),
woosh.Token(woosh.OP, '=', 552, 21, 552, 22),
woosh.Token(woosh.NAME, 'heapreplace', 552, 23, 552, 34),
woosh.Token(woosh.NEWLINE, '\r\n', 552, 34, 553, 0),
woosh.Token(woosh.NAME, 'for', 553, 8, 553, 11),
woosh.Token(woosh.NAME, 'elem', 553, 12, 553, 16),
woosh.Token(woosh.NAME, 'in', 553, 17, 553, 19),
woosh.Token(woosh.NAME, 'it', 553, 20, 553, 22),
woosh.Token(woosh.OP, ':', 553, 22, 553, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 553, 23, 554, 0),
woosh.Token(woosh.INDENT, '            ', 554, 0, 554, 12),
woosh.Token(woosh.NAME, 'if', 554, 12, 554, 14),
woosh.Token(woosh.NAME, 'top', 554, 15, 554, 18),
woosh.Token(woosh.OP, '<', 554, 19, 554, 20),
woosh.Token(woosh.NAME, 'elem', 554, 21, 554, 25),
woosh.Token(woosh.OP, ':', 554, 25, 554, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 554, 26, 555, 0),
woosh.Token(woosh.INDENT, '                ', 555, 0, 555, 16),
woosh.Token(woosh.NAME, '_heapreplace', 555, 16, 555, 28),
woosh.Token(woosh.OP, '(', 555, 28, 555, 29),
woosh.Token(woosh.NAME, 'result', 555, 29, 555, 35),
woosh.Token(woosh.OP, ',', 555, 35, 555, 36),
woosh.Token(woosh.OP, '(', 555, 37, 555, 38),
woosh.Token(woosh.NAME, 'elem', 555, 38, 555, 42),
woosh.Token(woosh.OP, ',', 555, 42, 555, 43),
woosh.Token(woosh.NAME, 'order', 555, 44, 555, 49),
woosh.Token(woosh.OP, ')', 555, 49, 555, 50),
woosh.Token(woosh.OP, ')', 555, 50, 555, 51),
woosh.Token(woosh.NEWLINE, '\r\n', 555, 51, 556, 0),
woosh.Token(woosh.NAME, 'top', 556, 16, 556, 19),
woosh.Token(woosh.OP, ',', 556, 19, 556, 20),
woosh.Token(woosh.NAME, '_order', 556, 21, 556, 27),
woosh.Token(woosh.OP, '=', 556, 28, 556, 29),
woosh.Token(woosh.NAME, 'result', 556, 30, 556, 36),
woosh.Token(woosh.OP, '[', 556, 36, 556, 37),
woosh.Token(woosh.NUMBER, '0', 556, 37, 556, 38),
woosh.Token(woosh.OP, ']', 556, 38, 556, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 556, 39, 557, 0),
woosh.Token(woosh.NAME, 'order', 557, 16, 557, 21),
woosh.Token(woosh.OP, '-=', 557, 22, 557, 24),
woosh.Token(woosh.NUMBER, '1', 557, 25, 557, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 557, 26, 558, 0),
woosh.Token(woosh.DEDENT, '        ', 558, 0, 558, 8),
woosh.Token(woosh.DEDENT, '', 558, 8, 558, 8),
woosh.Token(woosh.NAME, 'result', 558, 8, 558, 14),
woosh.Token(woosh.OP, '.', 558, 14, 558, 15),
woosh.Token(woosh.NAME, 'sort', 558, 15, 558, 19),
woosh.Token(woosh.OP, '(', 558, 19, 558, 20),
woosh.Token(woosh.NAME, 'reverse', 558, 20, 558, 27),
woosh.Token(woosh.OP, '=', 558, 27, 558, 28),
woosh.Token(woosh.NAME, 'True', 558, 28, 558, 32),
woosh.Token(woosh.OP, ')', 558, 32, 558, 33),
woosh.Token(woosh.NEWLINE, '\r\n', 558, 33, 559, 0),
woosh.Token(woosh.NAME, 'return', 559, 8, 559, 14),
woosh.Token(woosh.OP, '[', 559, 15, 559, 16),
woosh.Token(woosh.NAME, 'elem', 559, 16, 559, 20),
woosh.Token(woosh.NAME, 'for', 559, 21, 559, 24),
woosh.Token(woosh.OP, '(', 559, 25, 559, 26),
woosh.Token(woosh.NAME, 'elem', 559, 26, 559, 30),
woosh.Token(woosh.OP, ',', 559, 30, 559, 31),
woosh.Token(woosh.NAME, 'order', 559, 32, 559, 37),
woosh.Token(woosh.OP, ')', 559, 37, 559, 38),
woosh.Token(woosh.NAME, 'in', 559, 39, 559, 41),
woosh.Token(woosh.NAME, 'result', 559, 42, 559, 48),
woosh.Token(woosh.OP, ']', 559, 48, 559, 49),
woosh.Token(woosh.NEWLINE, '\r\n', 559, 49, 560, 0),
woosh.Token(woosh.COMMENT, '# General case, slowest method', 561, 4, 561, 34),
woosh.Token(woosh.DEDENT, '    ', 562, 0, 562, 4),
woosh.Token(woosh.NAME, 'it', 562, 4, 562, 6),
woosh.Token(woosh.OP, '=', 562, 7, 562, 8),
woosh.Token(woosh.NAME, 'iter', 562, 9, 562, 13),
woosh.Token(woosh.OP, '(', 562, 13, 562, 14),
woosh.Token(woosh.NAME, 'iterable', 562, 14, 562, 22),
woosh.Token(woosh.OP, ')', 562, 22, 562, 23),
woosh.Token(woosh.NEWLINE, '\r\n', 562, 23, 563, 0),
woosh.Token(woosh.NAME, 'result', 563, 4, 563, 10),
woosh.Token(woosh.OP, '=', 563, 11, 563, 12),
woosh.Token(woosh.OP, '[', 563, 13, 563, 14),
woosh.Token(woosh.OP, '(', 563, 14, 563, 15),
woosh.Token(woosh.NAME, 'key', 563, 15, 563, 18),
woosh.Token(woosh.OP, '(', 563, 18, 563, 19),
woosh.Token(woosh.NAME, 'elem', 563, 19, 563, 23),
woosh.Token(woosh.OP, ')', 563, 23, 563, 24),
woosh.Token(woosh.OP, ',', 563, 24, 563, 25),
woosh.Token(woosh.NAME, 'i', 563, 26, 563, 27),
woosh.Token(woosh.OP, ',', 563, 27, 563, 28),
woosh.Token(woosh.NAME, 'elem', 563, 29, 563, 33),
woosh.Token(woosh.OP, ')', 563, 33, 563, 34),
woosh.Token(woosh.NAME, 'for', 563, 35, 563, 38),
woosh.Token(woosh.NAME, 'i', 563, 39, 563, 40),
woosh.Token(woosh.OP, ',', 563, 40, 563, 41),
woosh.Token(woosh.NAME, 'elem', 563, 42, 563, 46),
woosh.Token(woosh.NAME, 'in', 563, 47, 563, 49),
woosh.Token(woosh.NAME, 'zip', 563, 50, 563, 53),
woosh.Token(woosh.OP, '(', 563, 53, 563, 54),
woosh.Token(woosh.NAME, 'range', 563, 54, 563, 59),
woosh.Token(woosh.OP, '(', 563, 59, 563, 60),
woosh.Token(woosh.NUMBER, '0', 563, 60, 563, 61),
woosh.Token(woosh.OP, ',', 563, 61, 563, 62),
woosh.Token(woosh.OP, '-', 563, 63, 563, 64),
woosh.Token(woosh.NAME, 'n', 563, 64, 563, 65),
woosh.Token(woosh.OP, ',', 563, 65, 563, 66),
woosh.Token(woosh.OP, '-', 563, 67, 563, 68),
woosh.Token(woosh.NUMBER, '1', 563, 68, 563, 69),
woosh.Token(woosh.OP, ')', 563, 69, 563, 70),
woosh.Token(woosh.OP, ',', 563, 70, 563, 71),
woosh.Token(woosh.NAME, 'it', 563, 72, 563, 74),
woosh.Token(woosh.OP, ')', 563, 74, 563, 75),
woosh.Token(woosh.OP, ']', 563, 75, 563, 76),
woosh.Token(woosh.NEWLINE, '\r\n', 563, 76, 564, 0),
woosh.Token(woosh.NAME, 'if', 564, 4, 564, 6),
woosh.Token(woosh.NAME, 'not', 564, 7, 564, 10),
woosh.Token(woosh.NAME, 'result', 564, 11, 564, 17),
woosh.Token(woosh.OP, ':', 564, 17, 564, 18),
woosh.Token(woosh.NEWLINE, '\r\n', 564, 18, 565, 0),
woosh.Token(woosh.INDENT, '        ', 565, 0, 565, 8),
woosh.Token(woosh.NAME, 'return', 565, 8, 565, 14),
woosh.Token(woosh.NAME, 'result', 565, 15, 565, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 565, 21, 566, 0),
woosh.Token(woosh.DEDENT, '    ', 566, 0, 566, 4),
woosh.Token(woosh.NAME, 'heapify', 566, 4, 566, 11),
woosh.Token(woosh.OP, '(', 566, 11, 566, 12),
woosh.Token(woosh.NAME, 'result', 566, 12, 566, 18),
woosh.Token(woosh.OP, ')', 566, 18, 566, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 566, 19, 567, 0),
woosh.Token(woosh.NAME, 'top', 567, 4, 567, 7),
woosh.Token(woosh.OP, '=', 567, 8, 567, 9),
woosh.Token(woosh.NAME, 'result', 567, 10, 567, 16),
woosh.Token(woosh.OP, '[', 567, 16, 567, 17),
woosh.Token(woosh.NUMBER, '0', 567, 17, 567, 18),
woosh.Token(woosh.OP, ']', 567, 18, 567, 19),
woosh.Token(woosh.OP, '[', 567, 19, 567, 20),
woosh.Token(woosh.NUMBER, '0', 567, 20, 567, 21),
woosh.Token(woosh.OP, ']', 567, 21, 567, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 567, 22, 568, 0),
woosh.Token(woosh.NAME, 'order', 568, 4, 568, 9),
woosh.Token(woosh.OP, '=', 568, 10, 568, 11),
woosh.Token(woosh.OP, '-', 568, 12, 568, 13),
woosh.Token(woosh.NAME, 'n', 568, 13, 568, 14),
woosh.Token(woosh.NEWLINE, '\r\n', 568, 14, 569, 0),
woosh.Token(woosh.NAME, '_heapreplace', 569, 4, 569, 16),
woosh.Token(woosh.OP, '=', 569, 17, 569, 18),
woosh.Token(woosh.NAME, 'heapreplace', 569, 19, 569, 30),
woosh.Token(woosh.NEWLINE, '\r\n', 569, 30, 570, 0),
woosh.Token(woosh.NAME, 'for', 570, 4, 570, 7),
woosh.Token(woosh.NAME, 'elem', 570, 8, 570, 12),
woosh.Token(woosh.NAME, 'in', 570, 13, 570, 15),
woosh.Token(woosh.NAME, 'it', 570, 16, 570, 18),
woosh.Token(woosh.OP, ':', 570, 18, 570, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 570, 19, 571, 0),
woosh.Token(woosh.INDENT, '        ', 571, 0, 571, 8),
woosh.Token(woosh.NAME, 'k', 571, 8, 571, 9),
woosh.Token(woosh.OP, '=', 571, 10, 571, 11),
woosh.Token(woosh.NAME, 'key', 571, 12, 571, 15),
woosh.Token(woosh.OP, '(', 571, 15, 571, 16),
woosh.Token(woosh.NAME, 'elem', 571, 16, 571, 20),
woosh.Token(woosh.OP, ')', 571, 20, 571, 21),
woosh.Token(woosh.NEWLINE, '\r\n', 571, 21, 572, 0),
woosh.Token(woosh.NAME, 'if', 572, 8, 572, 10),
woosh.Token(woosh.NAME, 'top', 572, 11, 572, 14),
woosh.Token(woosh.OP, '<', 572, 15, 572, 16),
woosh.Token(woosh.NAME, 'k', 572, 17, 572, 18),
woosh.Token(woosh.OP, ':', 572, 18, 572, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 572, 19, 573, 0),
woosh.Token(woosh.INDENT, '            ', 573, 0, 573, 12),
woosh.Token(woosh.NAME, '_heapreplace', 573, 12, 573, 24),
woosh.Token(woosh.OP, '(', 573, 24, 573, 25),
woosh.Token(woosh.NAME, 'result', 573, 25, 573, 31),
woosh.Token(woosh.OP, ',', 573, 31, 573, 32),
woosh.Token(woosh.OP, '(', 573, 33, 573, 34),
woosh.Token(woosh.NAME, 'k', 573, 34, 573, 35),
woosh.Token(woosh.OP, ',', 573, 35, 573, 36),
woosh.Token(woosh.NAME, 'order', 573, 37, 573, 42),
woosh.Token(woosh.OP, ',', 573, 42, 573, 43),
woosh.Token(woosh.NAME, 'elem', 573, 44, 573, 48),
woosh.Token(woosh.OP, ')', 573, 48, 573, 49),
woosh.Token(woosh.OP, ')', 573, 49, 573, 50),
woosh.Token(woosh.NEWLINE, '\r\n', 573, 50, 574, 0),
woosh.Token(woosh.NAME, 'top', 574, 12, 574, 15),
woosh.Token(woosh.OP, ',', 574, 15, 574, 16),
woosh.Token(woosh.NAME, '_order', 574, 17, 574, 23),
woosh.Token(woosh.OP, ',', 574, 23, 574, 24),
woosh.Token(woosh.NAME, '_elem', 574, 25, 574, 30),
woosh.Token(woosh.OP, '=', 574, 31, 574, 32),
woosh.Token(woosh.NAME, 'result', 574, 33, 574, 39),
woosh.Token(woosh.OP, '[', 574, 39, 574, 40),
woosh.Token(woosh.NUMBER, '0', 574, 40, 574, 41),
woosh.Token(woosh.OP, ']', 574, 41, 574, 42),
woosh.Token(woosh.NEWLINE, '\r\n', 574, 42, 575, 0),
woosh.Token(woosh.NAME, 'order', 575, 12, 575, 17),
woosh.Token(woosh.OP, '-=', 575, 18, 575, 20),
woosh.Token(woosh.NUMBER, '1', 575, 21, 575, 22),
woosh.Token(woosh.NEWLINE, '\r\n', 575, 22, 576, 0),
woosh.Token(woosh.DEDENT, '    ', 576, 0, 576, 4),
woosh.Token(woosh.DEDENT, '', 576, 4, 576, 4),
woosh.Token(woosh.NAME, 'result', 576, 4, 576, 10),
woosh.Token(woosh.OP, '.', 576, 10, 576, 11),
woosh.Token(woosh.NAME, 'sort', 576, 11, 576, 15),
woosh.Token(woosh.OP, '(', 576, 15, 576, 16),
woosh.Token(woosh.NAME, 'reverse', 576, 16, 576, 23),
woosh.Token(woosh.OP, '=', 576, 23, 576, 24),
woosh.Token(woosh.NAME, 'True', 576, 24, 576, 28),
woosh.Token(woosh.OP, ')', 576, 28, 576, 29),
woosh.Token(woosh.NEWLINE, '\r\n', 576, 29, 577, 0),
woosh.Token(woosh.NAME, 'return', 577, 4, 577, 10),
woosh.Token(woosh.OP, '[', 577, 11, 577, 12),
woosh.Token(woosh.NAME, 'elem', 577, 12, 577, 16),
woosh.Token(woosh.NAME, 'for', 577, 17, 577, 20),
woosh.Token(woosh.OP, '(', 577, 21, 577, 22),
woosh.Token(woosh.NAME, 'k', 577, 22, 577, 23),
woosh.Token(woosh.OP, ',', 577, 23, 577, 24),
woosh.Token(woosh.NAME, 'order', 577, 25, 577, 30),
woosh.Token(woosh.OP, ',', 577, 30, 577, 31),
woosh.Token(woosh.NAME, 'elem', 577, 32, 577, 36),
woosh.Token(woosh.OP, ')', 577, 36, 577, 37),
woosh.Token(woosh.NAME, 'in', 577, 38, 577, 40),
woosh.Token(woosh.NAME, 'result', 577, 41, 577, 47),
woosh.Token(woosh.OP, ']', 577, 47, 577, 48),
woosh.Token(woosh.NEWLINE, '\r\n', 577, 48, 578, 0),
woosh.Token(woosh.COMMENT, '# If available, use C implementation', 579, 0, 579, 36),
woosh.Token(woosh.DEDENT, '', 580, 0, 580, 0),
woosh.Token(woosh.NAME, 'try', 580, 0, 580, 3),
woosh.Token(woosh.OP, ':', 580, 3, 580, 4),
woosh.Token(woosh.NEWLINE, '\r\n', 580, 4, 581, 0),
woosh.Token(woosh.INDENT, '    ', 581, 0, 581, 4),
woosh.Token(woosh.NAME, 'from', 581, 4, 581, 8),
woosh.Token(woosh.NAME, '_heapq', 581, 9, 581, 15),
woosh.Token(woosh.NAME, 'import', 581, 16, 581, 22),
woosh.Token(woosh.OP, '*', 581, 23, 581, 24),
woosh.Token(woosh.NEWLINE, '\r\n', 581, 24, 582, 0),
woosh.Token(woosh.DEDENT, '', 582, 0, 582, 0),
woosh.Token(woosh.NAME, 'except', 582, 0, 582, 6),
woosh.Token(woosh.NAME, 'ImportError', 582, 7, 582, 18),
woosh.Token(woosh.OP, ':', 582, 18, 582, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 582, 19, 583, 0),
woosh.Token(woosh.INDENT, '    ', 583, 0, 583, 4),
woosh.Token(woosh.NAME, 'pass', 583, 4, 583, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 583, 8, 584, 0),
woosh.Token(woosh.DEDENT, '', 584, 0, 584, 0),
woosh.Token(woosh.NAME, 'try', 584, 0, 584, 3),
woosh.Token(woosh.OP, ':', 584, 3, 584, 4),
woosh.Token(woosh.NEWLINE, '\r\n', 584, 4, 585, 0),
woosh.Token(woosh.INDENT, '    ', 585, 0, 585, 4),
woosh.Token(woosh.NAME, 'from', 585, 4, 585, 8),
woosh.Token(woosh.NAME, '_heapq', 585, 9, 585, 15),
woosh.Token(woosh.NAME, 'import', 585, 16, 585, 22),
woosh.Token(woosh.NAME, '_heapreplace_max', 585, 23, 585, 39),
woosh.Token(woosh.NEWLINE, '\r\n', 585, 39, 586, 0),
woosh.Token(woosh.DEDENT, '', 586, 0, 586, 0),
woosh.Token(woosh.NAME, 'except', 586, 0, 586, 6),
woosh.Token(woosh.NAME, 'ImportError', 586, 7, 586, 18),
woosh.Token(woosh.OP, ':', 586, 18, 586, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 586, 19, 587, 0),
woosh.Token(woosh.INDENT, '    ', 587, 0, 587, 4),
woosh.Token(woosh.NAME, 'pass', 587, 4, 587, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 587, 8, 588, 0),
woosh.Token(woosh.DEDENT, '', 588, 0, 588, 0),
woosh.Token(woosh.NAME, 'try', 588, 0, 588, 3),
woosh.Token(woosh.OP, ':', 588, 3, 588, 4),
woosh.Token(woosh.NEWLINE, '\r\n', 588, 4, 589, 0),
woosh.Token(woosh.INDENT, '    ', 589, 0, 589, 4),
woosh.Token(woosh.NAME, 'from', 589, 4, 589, 8),
woosh.Token(woosh.NAME, '_heapq', 589, 9, 589, 15),
woosh.Token(woosh.NAME, 'import', 589, 16, 589, 22),
woosh.Token(woosh.NAME, '_heapify_max', 589, 23, 589, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 589, 35, 590, 0),
woosh.Token(woosh.DEDENT, '', 590, 0, 590, 0),
woosh.Token(woosh.NAME, 'except', 590, 0, 590, 6),
woosh.Token(woosh.NAME, 'ImportError', 590, 7, 590, 18),
woosh.Token(woosh.OP, ':', 590, 18, 590, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 590, 19, 591, 0),
woosh.Token(woosh.INDENT, '    ', 591, 0, 591, 4),
woosh.Token(woosh.NAME, 'pass', 591, 4, 591, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 591, 8, 592, 0),
woosh.Token(woosh.DEDENT, '', 592, 0, 592, 0),
woosh.Token(woosh.NAME, 'try', 592, 0, 592, 3),
woosh.Token(woosh.OP, ':', 592, 3, 592, 4),
woosh.Token(woosh.NEWLINE, '\r\n', 592, 4, 593, 0),
woosh.Token(woosh.INDENT, '    ', 593, 0, 593, 4),
woosh.Token(woosh.NAME, 'from', 593, 4, 593, 8),
woosh.Token(woosh.NAME, '_heapq', 593, 9, 593, 15),
woosh.Token(woosh.NAME, 'import', 593, 16, 593, 22),
woosh.Token(woosh.NAME, '_heappop_max', 593, 23, 593, 35),
woosh.Token(woosh.NEWLINE, '\r\n', 593, 35, 594, 0),
woosh.Token(woosh.DEDENT, '', 594, 0, 594, 0),
woosh.Token(woosh.NAME, 'except', 594, 0, 594, 6),
woosh.Token(woosh.NAME, 'ImportError', 594, 7, 594, 18),
woosh.Token(woosh.OP, ':', 594, 18, 594, 19),
woosh.Token(woosh.NEWLINE, '\r\n', 594, 19, 595, 0),
woosh.Token(woosh.INDENT, '    ', 595, 0, 595, 4),
woosh.Token(woosh.NAME, 'pass', 595, 4, 595, 8),
woosh.Token(woosh.NEWLINE, '\r\n', 595, 8, 596, 0),
woosh.Token(woosh.DEDENT, '', 598, 0, 598, 0),
woosh.Token(woosh.NAME, 'if', 598, 0, 598, 2),
woosh.Token(woosh.NAME, '__name__', 598, 3, 598, 11),
woosh.Token(woosh.OP, '==', 598, 12, 598, 14),
woosh.Token(woosh.STRING, '"__main__"', 598, 15, 598, 25),
woosh.Token(woosh.OP, ':', 598, 25, 598, 26),
woosh.Token(woosh.NEWLINE, '\r\n', 598, 26, 599, 0),
woosh.Token(woosh.INDENT, '    ', 600, 0, 600, 4),
woosh.Token(woosh.NAME, 'import', 600, 4, 600, 10),
woosh.Token(woosh.NAME, 'doctest', 600, 11, 600, 18),
woosh.Token(woosh.COMMENT, '# pragma: no cover', 600, 19, 600, 37),
woosh.Token(woosh.NEWLINE, '\r\n', 600, 37, 601, 0),
woosh.Token(woosh.NAME, 'print', 601, 4, 601, 9),
woosh.Token(woosh.OP, '(', 601, 9, 601, 10),
woosh.Token(woosh.NAME, 'doctest', 601, 10, 601, 17),
woosh.Token(woosh.OP, '.', 601, 17, 601, 18),
woosh.Token(woosh.NAME, 'testmod', 601, 18, 601, 25),
woosh.Token(woosh.OP, '(', 601, 25, 601, 26),
woosh.Token(woosh.OP, ')', 601, 26, 601, 27),
woosh.Token(woosh.OP, ')', 601, 27, 601, 28),
woosh.Token(woosh.COMMENT, '# pragma: no cover', 601, 29, 601, 47),
woosh.Token(woosh.NEWLINE, '\r\n', 601, 47, 602, 0),
woosh.Token(woosh.DEDENT, '', 602, 0, 602, 0),
woosh.Token(woosh.EOF, '', 602, 0, 602, 0),
]
